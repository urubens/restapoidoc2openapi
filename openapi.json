{"openapi": "3.0.1", "info": {"title": "Cytomine API", "version": "1.0.0"}, "tags": [{"name": "Image | abstract image services", "description": "Methods for managing an image. See image instance service to manage an instance of image in a project."}, {"name": "Image | abstract slice services", "description": "Methods to manage an abstract slice. See slice instance service to manage an instance of a slice in a project."}, {"name": "Image | companion file services", "description": "Methods to manage a companion file."}, {"name": "Image | image instance services", "description": "Methods for managing an image instance : abstract image linked to a project"}, {"name": "Image | multidim | HDF5 services", "description": "Methods for managing HDF5 image group"}, {"name": "Image | multidim | image group services", "description": "Methods for managing image group, a group of image from the same sample in different dimension (channel, zstack,...)"}, {"name": "Image | multidim | image sequence services", "description": "Methods for managing image sequence that represent an image from a group in a given channel, zstack, slice, time..."}, {"name": "Image | nested image services", "description": "Methods for managing a nested image, a sub-image of an existing image instance"}, {"name": "Image | server | storage services", "description": "Methods to manage storages"}, {"name": "Image | slice instance services", "description": "Methods to manage a slice instance."}, {"name": "Image | uploaded file services", "description": "Methods for managing an uploaded image file."}, {"name": "Imaging | imaging server", "description": "Methods to manage imaging servers"}, {"name": "Laboratory | sample services", "description": "Methods for managing a sample, part of 'source' that has been scan to image"}, {"name": "Middleware | AMPQ Queue Configuration instance services", "description": "Method to manage an instance of AMPQ configuration"}, {"name": "Middleware | AMQP Queue Configuration services", "description": "Methods useful for managing AMQP configurations"}, {"name": "Middleware | AMQP Queue services", "description": "Methods useful for managing AMQP queues"}, {"name": "Middleware | image server", "description": "Methods to manage image servers (IMS)"}, {"name": "Middleware | message broker server services", "description": "Methods for managing message broker servers"}, {"name": "Ontology | algo annotation services", "description": "Methods for managing an annotation created by a software"}, {"name": "Ontology | annotation filter services", "description": "Methods for managing a filter for annotation search (save search criteria)"}, {"name": "Ontology | annotation index services", "description": "Methods for managing annotation index. Its auto index that store entries <slice,user,nbAnnotation,nbReviewed>"}, {"name": "Ontology | annotation term services", "description": "Methods for managing annotation term. Term added to an annotation by user or job."}, {"name": "Ontology | annotation track services", "description": "Methods for managing annotation tracks."}, {"name": "Ontology | generic annotation services", "description": "Methods for managing an annotation created by a software"}, {"name": "Ontology | ontology services", "description": "Methods for managing ontologies"}, {"name": "Ontology | property services", "description": "Methods for managing properties"}, {"name": "Ontology | relation services", "description": "Methods for managing relations"}, {"name": "Ontology | relation term services", "description": "Methods for managing relation between terms in ontology (ex: t1 parent t2)"}, {"name": "Ontology | reviewed annotation services", "description": "Methods for managing reviewed annotation, annotation validated by human"}, {"name": "Ontology | term services", "description": "Methods for managing terms"}, {"name": "Ontology | track services", "description": "Methods for managing tracks"}, {"name": "Ontology | user annotation services", "description": "Methods for managing an annotation created by a human user"}, {"name": "Processing | image filter project services", "description": "Methods for managing image filter project, a link between an image filter and a project"}, {"name": "Processing | image filter services", "description": "Methods for managing image filter, filter that can be apply to a picture"}, {"name": "Processing | job data services", "description": "Methods for managing job data file. Files can be saved on filesystem or in database."}, {"name": "Processing | job parameter services", "description": "Methods for managing job parameter. Each software may have some parameters (e.g.: cytomine project id, number of thread,...). A job parameter is a software parameter instance with a specific value for this job"}, {"name": "Processing | job services", "description": "Methods for managing job. A job is a software instance that has been, is or will be running."}, {"name": "Processing | job template annotation services", "description": "Methods for managing a link between a job template and an annotation (roi or other type)"}, {"name": "Processing | job template services", "description": "Methods for managing job template, a pre-filled job to quickly run"}, {"name": "Processing | roi annotation services", "description": "Methods for managing an region of interest annotation"}, {"name": "Processing | software parameter services", "description": "Methods for software parameters, a software may have some parameter (thread number, project id,...). When a software is running, a job is created. Each software parameter will produced a job parameter with a specific value."}, {"name": "Processing | software project services", "description": "Methods for managing software, application that can be launch (job)"}, {"name": "Processing | software services", "description": "Methods for managing software, application that can be launch (job)"}, {"name": "Project | discipline services", "description": "Methods for managing discipline"}, {"name": "Project | project default layer services", "description": "Controller for project default layer"}, {"name": "Project | project services", "description": "Methods for managing projects"}, {"name": "Project | representative user services", "description": "Controller for project representative user"}, {"name": "Search | search engine filter services", "description": "Methods for managing filter of the search engine"}, {"name": "Search | search engine services", "description": "Methods for searching domain (v2)"}, {"name": "Search | search services", "description": "Methods for searching domain"}, {"name": "Security | acl services", "description": "Methods for managing ACL, a permission for an user on a specific domain instance"}, {"name": "Security | group services", "description": "Methods for managing user groups"}, {"name": "Security | sec role services", "description": "Methods for managing user role"}, {"name": "Security | sec user sec role services", "description": "Methods for managing a user role"}, {"name": "Security | user group services", "description": "Methods for managing a user in groups"}, {"name": "Security | user job services", "description": "Methods for managing a user job, a user created for a software execution"}, {"name": "Security | user services", "description": "Methods for managing a user"}, {"name": "Social | annotation action services", "description": "Methods to manage actions performed on annotations"}, {"name": "Social | image consultation services", "description": "Methods to manage the consultation records of an image by a user"}, {"name": "Social | project connection services", "description": "Methods to manage a user connection record to a project"}, {"name": "Social| user position services", "description": "Methods for managing user positions in an image"}, {"name": "Software user repositories services", "description": "Methods for managing software user repositories"}, {"name": "Utils | attached services", "description": "Methods for managing attached file on a specific domain"}, {"name": "Utils | description services", "description": "Methods for managing description on a specific domain"}, {"name": "tag domain association services", "description": "Methods for managing associations between a tag and a domain"}, {"name": "tag services", "description": "Methods for managing tags, flags that can be associated to Cytomine domain"}], "paths": {"/api/abstractimage/{id}.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get an image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}, "description": ""}}}, "put": {"tags": ["Image | abstract image services"], "description": "Update an image in the software", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}}}, "delete": {"tags": ["Image | abstract image services"], "description": "Delete an abstract image)", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}, "description": ""}}}}, "/api/uploadedfile/{id}/abstractimage.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get an abstract image from its uploaded file", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}, "description": ""}}}}, "/api/abstractimage/{id}/associated/{label}.png": {"post": {"tags": ["Image | abstract image services"], "description": "Get an associated image of a abstract image (e.g. label, macro, thumbnail)", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "label", "in": "path", "description": "The associated image label", "required": true, "schema": {"type": "string"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractimage/{id}/associated/{label}.jpg": {"post": {"tags": ["Image | abstract image services"], "description": "Get an associated image of a abstract image (e.g. label, macro, thumbnail)", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "label", "in": "path", "description": "The associated image label", "required": true, "schema": {"type": "string"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractimage/{id}/associated.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get available associated images", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "associated image labels"}}}}, "/api/abstractimage/{id}/properties/populate.json": {"post": {"tags": ["Image | abstract image services"], "description": "Get all image properties (metadata) from underlying file", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}}, "/api/abstractimage/unused.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get all unused images available for the current user", "parameters": [{"name": "id", "in": "query", "description": "The id of abstract image", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Abstract-image"}}}}, "description": ""}}}}, "/api/abstractimage/{id}/histogram/stats.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get histogram statistics for the whole image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "empty"}}}}, "/api/abstractimage/{id}/properties/clear.json": {"post": {"tags": ["Image | abstract image services"], "description": "Delete all previously saved image properties", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}}, "/api/abstractimage/{id}/user.json": {"get": {"tags": ["Image | abstract image services"], "description": "Show user who uploaded an image", "parameters": [{"name": "id", "in": "path", "description": "The abstract image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}, "description": ""}}}}, "/api/abstractimage/{id}/histogram/extract.json": {"post": {"tags": ["Image | abstract image services"], "description": "Compute histogram for the whole image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}}, "/api/abstractimage/{id}/properties/extract.json": {"post": {"tags": ["Image | abstract image services"], "description": "Fill main image field from image properties", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "deep", "in": "path", "description": "True to fill property slice fields", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}}, "/api/abstractimage/{id}/properties/regenerate.json": {"post": {"tags": ["Image | abstract image services"], "description": "Regenerate main image field from image properties", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "deep", "in": "path", "description": "True to fill property slice fields", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}}, "/api/project/{id}/image.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get all image having an instance in a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Abstract-image"}}}}, "description": ""}}}}, "/api/abstractimage/{id}/thumb.png": {"post": {"tags": ["Image | abstract image services"], "description": "Get a small image (thumb) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractimage/{id}/thumb.jpg": {"post": {"tags": ["Image | abstract image services"], "description": "Get a small image (thumb) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractimage/{id}/preview.png": {"post": {"tags": ["Image | abstract image services"], "description": "Get an image (preview) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractimage/{id}/preview.jpg": {"post": {"tags": ["Image | abstract image services"], "description": "Get an image (preview) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractimage/{id}/imageservers.json": {"get": {"tags": ["Image | abstract image services"], "description": "Get all image servers URL for an image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "URL list"}}}}, "/api/abstractimage.json": {"post": {"tags": ["Image | abstract image services"], "description": "Add a new image in the software. See IMS to upload an image", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-image"}}}}}, "get": {"tags": ["Image | abstract image services"], "description": "Get all image available for the current user", "parameters": [{"name": "project", "in": "query", "description": "If set, check if image is in project or not", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Abstract-image"}}}}, "description": ""}}}}, "/api/abstractslice/{id}.json": {"get": {"tags": ["Image | abstract slice services"], "description": "Get an abstract slice", "parameters": [{"name": "id", "in": "path", "description": "The abstract slice id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}, "description": ""}}}, "put": {"tags": ["Image | abstract slice services"], "description": "Update an abstract slice", "parameters": [{"name": "id", "in": "path", "description": "The abstract slice id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}}}, "delete": {"tags": ["Image | abstract slice services"], "description": "Delete an abstract slice)", "parameters": [{"name": "id", "in": "path", "description": "The abstract slice id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}, "description": ""}}}}, "/api/abstractimage/{id}/abstractslice.json": {"get": {"tags": ["Image | abstract slice services"], "description": "Get all abstract slices for the given abstract image", "parameters": [{"name": "id", "in": "path", "description": "The abstract image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Abstract-slice"}}}}, "description": ""}}}}, "/api/uploadedfile/{id}/abstractslice.json": {"get": {"tags": ["Image | abstract slice services"], "description": "Get all abstract slices for the given uploaded file", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Abstract-slice"}}}}, "description": ""}}}}, "/api/abstractslice/{id}/user.json": {"get": {"tags": ["Image | abstract slice services"], "description": "Show user who uploaded the slice", "parameters": [{"name": "id", "in": "path", "description": "The abstract slice id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}, "description": ""}}}}, "/api/abstractimage/{id}/{channel}/{zStack}/{time}/abstractslice.json": {"get": {"tags": ["Image | abstract slice services"], "description": "Get the abstract slice for the given coordinates and abstract image", "parameters": [{"name": "id", "in": "path", "description": "The abstract image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "zStack", "in": "path", "description": "The zStack coordinate", "required": true, "schema": {"type": "number"}}, {"name": "time", "in": "path", "description": "The time coordinate", "required": true, "schema": {"type": "number"}}, {"name": "channel", "in": "path", "description": "The channel coordinate", "required": true, "schema": {"type": "number"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}, "description": ""}}}}, "/api/abstractslice/{id}/thumb.png": {"post": {"tags": ["Image | abstract slice services"], "description": "Get a small image (thumb) for a specific slice", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractslice/{id}/thumb.jpg": {"post": {"tags": ["Image | abstract slice services"], "description": "Get a small image (thumb) for a specific slice", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/abstractslice.json": {"post": {"tags": ["Image | abstract slice services"], "description": "Add a new abstract slice. See 'upload file service' to upload a slice.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Abstract-slice"}}}}}}, "/api/companionfile/{id}.json": {"get": {"tags": ["Image | companion file services"], "description": "Get a companion file", "parameters": [{"name": "id", "in": "path", "description": "The companion file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}, "description": ""}}}, "put": {"tags": ["Image | companion file services"], "description": "Update a companion file", "parameters": [{"name": "id", "in": "path", "description": "The companion file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}}}, "delete": {"tags": ["Image | companion file services"], "description": "Delete a companion file)", "parameters": [{"name": "id", "in": "path", "description": "The companion file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}, "description": ""}}}}, "/api/abstractimage/{id}/companionfile.json": {"get": {"tags": ["Image | companion file services"], "description": "Get all companion files for the given abstract image", "parameters": [{"name": "id", "in": "path", "description": "The abstract image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Companion-file"}}}}, "description": ""}}}}, "/api/uploadedfile/{id}/companionfile.json": {"get": {"tags": ["Image | companion file services"], "description": "Get all companion files for the given uploaded file", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Companion-file"}}}}, "description": ""}}}}, "/api/companionfile/{id}/user.json": {"get": {"tags": ["Image | companion file services"], "description": "Show user who uploaded the companion file", "parameters": [{"name": "id", "in": "path", "description": "The companion file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}, "description": ""}}}}, "/api/profile.json": {"post": {"tags": ["Image | companion file services"], "description": "Ask to compute HDF5 profile for the given image", "parameters": [{"name": "image", "in": "path", "description": "The abstract image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}}}}, "/api/companionfile.json": {"post": {"tags": ["Image | companion file services"], "description": "Add a new companion file. See 'upload file service' to upload a slice.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Companion-file"}}}}}}, "/api/imageinstance/{id}.json": {"get": {"tags": ["Image | image instance services"], "description": "Get an image instance", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}, "description": ""}}}, "put": {"tags": ["Image | image instance services"], "description": "Update an image instance", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}}}, "delete": {"tags": ["Image | image instance services"], "description": "Delete an image from a project)", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}, "description": ""}}}}, "/api/imageinstance/{id}/associated/{label}.png": {"post": {"tags": ["Image | image instance services"], "description": "Get an associated image of a abstract image (e.g. label, macro, thumbnail)", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "label", "in": "path", "description": "The associated image label", "required": true, "schema": {"type": "string"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/imageinstance/{id}/associated/{label}.jpg": {"post": {"tags": ["Image | image instance services"], "description": "Get an associated image of a abstract image (e.g. label, macro, thumbnail)", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "label", "in": "path", "description": "The associated image label", "required": true, "schema": {"type": "string"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/imageinstance/{id}/associated.json": {"get": {"tags": ["Image | image instance services"], "description": "Get available associated images", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "associated image labels"}}}}, "/api/imageinstance/{id}/histogram/stats.json": {"get": {"tags": ["Image | image instance services"], "description": "Get histogram statistics for the whole image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "empty"}}}}, "/api/imageinstance/{id}/histogram/extract.json": {"post": {"tags": ["Image | image instance services"], "description": "Compute histogram for the whole image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}}, "/api/imageinstance/method/lastopened.json": {"get": {"tags": ["Image | image instance services"], "description": "Get the last opened image for the current user", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-instance"}}}}, "description": ""}}}}, "/api/user/{user}/imageinstance/light.json": {"get": {"tags": ["Image | image instance services"], "description": "Get a lighted list of all image instance available for the current user", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-instance"}}}}, "description": ""}}}}, "/api/user/{user}/imageinstance.json": {"get": {"tags": ["Image | image instance services"], "description": "Get all image instance available for the current user", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-instance"}}}}, "description": ""}}}}, "/api/project/{project}/imageinstance.json": {"get": {"tags": ["Image | image instance services"], "description": "Get all image instance for a specific project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "tree", "in": "query", "description": "(optional) Get a tree (with parent image as node)", "required": true, "schema": {"type": "boolean"}}, {"name": "sortColumn", "in": "query", "description": "(optional) Column sort (created by default)", "required": true, "schema": {"type": "string"}}, {"name": "sortDirection", "in": "query", "description": "(optional) Sort direction (desc by default)", "required": true, "schema": {"type": "string"}}, {"name": "search", "in": "query", "description": "(optional) Original filename search filter (all by default)", "required": true, "schema": {"type": "string"}}, {"name": "withLastActivity", "in": "query", "description": "(optional) Return the last consultation of current user in each image. Not compatible with tree, excludeimagegroup and datatables parameters ", "required": true, "schema": {"type": "boolean"}}, {"name": "light", "in": "query", "description": "(optional, default false) If true, the returned list will only contain id, instanceFilename and blindedName properties. Not compatible with tree, excludeimagegroup, datatables and withLastActivity parameters", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-instance"}}}}, "description": ""}}}}, "/api/imageinstance/{id}/thumb.png": {"post": {"tags": ["Image | image instance services"], "description": "Get a small image (thumb) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/imageinstance/{id}/thumb.jpg": {"post": {"tags": ["Image | image instance services"], "description": "Get a small image (thumb) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/imageinstance/{id}/preview.png": {"post": {"tags": ["Image | image instance services"], "description": "Get an image (preview) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/imageinstance/{id}/preview.jpg": {"post": {"tags": ["Image | image instance services"], "description": "Get an image (preview) for a specific image", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/imageinstance.json": {"post": {"tags": ["Image | image instance services"], "description": "Add a new image instance in a project. If we add an image previously deleted, all previous information will be restored.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}}}}, "/api/imageinstance/{id}/next.json": {"get": {"tags": ["Image | image instance services"], "description": "Get the next project image (first image created before)", "parameters": [{"name": "id", "in": "path", "description": "The current image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}, "description": ""}}}}, "/api/imageinstance/{id}/previous.json": {"get": {"tags": ["Image | image instance services"], "description": "Get the previous project image (first image created after)", "parameters": [{"name": "id", "in": "path", "description": "The current image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-instance"}}}, "description": ""}}}}, "/api/imagegroupHDF5/{id}.json": {"get": {"tags": ["Image | multidim | HDF5 services"], "description": "Get a HDF5 image group", "parameters": [{"name": "id", "in": "path", "description": "The HDF5 image group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}}, "put": {"tags": ["Image | multidim | HDF5 services"], "description": "Update a HDF5 image group", "parameters": [{"name": "id", "in": "path", "description": "The HDF5 image group id", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}}}, "delete": {"tags": ["Image | multidim | HDF5 services"], "description": "Delete a HDF5 image group", "parameters": [{"name": "id", "in": "path", "description": "The HDF5 image group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}}}, "/api/imagegroupHDF5/{id}/{x}/{y}/pixel.json": {"get": {"tags": ["Image | multidim | HDF5 services"], "description": "Get the spectrum of a pixel using a HDF5 image group", "parameters": [{"name": "id", "in": "path", "description": "The HDF5 image group ID", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "x", "in": "path", "description": "The x coordinate (0 is left)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "y", "in": "path", "description": "The y coordinate (0 is top)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "minChannel", "in": "query", "description": "The minimum channel", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "maxChannel", "in": "query", "description": "The maximum channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}}}, "/api/imagegroup/{group}/imagegroupHDF5.json": {"get": {"tags": ["Image | multidim | HDF5 services"], "description": "Get a HDF5 image group for a specified image group", "parameters": [{"name": "group", "in": "path", "description": "The image group ID that is linked to the HDF5 image group", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}}, "delete": {"tags": ["Image | multidim | HDF5 services"], "description": "Delete a HDF5 image group for a specified image group", "parameters": [{"name": "group", "in": "path", "description": "The image group ID that is linked to the HDF5 image group", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}}}, "/api/imagegroupHDF5/{id}/{x}/{y}/{w}/{h}/rectangle.json": {"get": {"tags": ["Image | multidim | HDF5 services"], "description": "Get the spectrum of a rectangle using a HDF5 image group", "parameters": [{"name": "id", "in": "path", "description": "The HDF5 image group ID", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "x", "in": "path", "description": "The x coordinate (0 is left)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "y", "in": "path", "description": "The y coordinate (0 is top)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "w", "in": "path", "description": "The width of the rectangle", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "h", "in": "path", "description": "The height of the rectangle", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "minChannel", "in": "query", "description": "The minimum channel", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "maxChannel", "in": "query", "description": "The maximum channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}}}, "/api/imagegroupHDF5.json": {"post": {"tags": ["Image | multidim | HDF5 services"], "description": "Add a new HDF5 image group. It extends an image group with HDF5 functionalities", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-Group-HDF5"}}}}}}, "/api/imagegroup/{id}.json": {"get": {"tags": ["Image | multidim | image group services"], "description": "Get an image group", "parameters": [{"name": "id", "in": "path", "description": "The image group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}, "description": ""}}}, "put": {"tags": ["Image | multidim | image group services"], "description": "Update an image group", "parameters": [{"name": "id", "in": "path", "description": "The image group id", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}}}, "delete": {"tags": ["Image | multidim | image group services"], "description": "Delete an image group", "parameters": [{"name": "id", "in": "path", "description": "The image group", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}, "description": ""}}}}, "/api/imagegroup/{id}/characteristics.json": {"get": {"tags": ["Image | multidim | image group services"], "description": "Get the different Characteristics for ImageGroup", "parameters": [{"name": "id", "in": "path", "description": "The image group", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}, "description": ""}}}}, "/api/project/{id}/imagegroup.json": {"get": {"tags": ["Image | multidim | image group services"], "description": "Get image group listing by project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-group"}}}}, "description": ""}}}}, "/api/imagegroup/{id}/thumb.json": {"get": {"tags": ["Image | multidim | image group services"], "description": "Get a small image (thumb) for a specific multidimensional image", "parameters": [{"name": "id", "in": "path", "description": "The image group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/imagegroup.json": {"post": {"tags": ["Image | multidim | image group services"], "description": "Add a new image group", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-group"}}}}}}, "/api/imagesequence/{id}.json": {"get": {"tags": ["Image | multidim | image sequence services"], "description": "Get an image sequence", "parameters": [{"name": "id", "in": "path", "description": "The image sequence id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-sequence"}}}, "description": ""}}}, "put": {"tags": ["Image | multidim | image sequence services"], "description": "Update an image sequence (id must be defined in post data JSON)", "parameters": [{"name": "id", "in": "path", "description": "The image sequence id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-sequence"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-sequence"}}}}}, "delete": {"tags": ["Image | multidim | image sequence services"], "description": "Delete an image sequence)", "parameters": [{"name": "id", "in": "path", "description": "The image sequence id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-sequence"}}}, "description": ""}}}}, "/api/imageinstance/{id}/imagesequence.json": {"get": {"tags": ["Image | multidim | image sequence services"], "description": "List all image sequence from a specific image instance", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-sequence"}}}}, "description": ""}}}}, "/api/imagegroup/{id}/imagesequence.json": {"get": {"tags": ["Image | multidim | image sequence services"], "description": "Get all image sequence from an image group", "parameters": [{"name": "id", "in": "path", "description": "The group id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-sequence"}}}}, "description": ""}}}}, "/api/imagegroup/{id}/{channel}/{zstack}/{slice}/{time}/imagesequence.json": {"get": {"tags": ["Image | multidim | image sequence services"], "description": "Get the image sequence in the given channel, zstack,... and image group", "parameters": [{"name": "id", "in": "path", "description": "The image group id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "zstack", "in": "path", "description": "Zstack filter", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "time", "in": "path", "description": "Time filter", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "channel", "in": "path", "description": "Channel filter", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "slice", "in": "path", "description": "Slice filter", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-sequence"}}}}, "description": ""}}}}, "/api/imageinstance/{id}/imagesequence/possibilities.json": {"get": {"tags": ["Image | multidim | image sequence services"], "description": "Get the image dimension index (e.g. c=0, z=1, t=3,...) and the possible range for each dimension (e.g. image x has channel [0-2], zstack only 0, time [0-1],... ", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/sequence_possibilties"}}}, "description": ""}}}}, "/api/imagesequence.json": {"post": {"tags": ["Image | multidim | image sequence services"], "description": "Add a new image sequence (index a new image instance at a given channel, zstack,... in an image group", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-sequence"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-sequence"}}}}}}, "/api/imageinstance/{idImage}/nested/{id}.json": {"get": {"tags": ["Image | nested image services"], "description": "Get a nested image", "parameters": [{"name": "id", "in": "path", "description": "The nested image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idImage", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Nested-image-instance"}}}, "description": ""}}}, "put": {"tags": ["Image | nested image services"], "description": "Update a nested image instance", "parameters": [{"name": "id", "in": "path", "description": "The nested image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idImage", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Nested-image-instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Nested-image-instance"}}}}}, "delete": {"tags": ["Image | nested image services"], "description": "Delete a nested image instance)", "parameters": [{"name": "id", "in": "path", "description": "The nested image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idImage", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Nested-image-instance"}}}, "description": ""}}}}, "/api/imageinstance/{idImage}/nested.json": {"get": {"tags": ["Image | nested image services"], "description": "List all nested image for an image instance", "parameters": [{"name": "idImage", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Nested-image-instance"}}}}, "description": ""}}}, "post": {"tags": ["Image | nested image services"], "description": "Add a new nested image (from an image instance)", "parameters": [{"name": "idImage", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Nested-image-instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Nested-image-instance"}}}}}}, "/api/storage/{id}.json": {"get": {"tags": ["Image | server | storage services"], "description": "Get a storage", "parameters": [{"name": "id", "in": "path", "description": "The storage id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Storage"}}}, "description": ""}}}, "put": {"tags": ["Image | server | storage services"], "description": "Update a storage", "parameters": [{"name": "id", "in": "path", "description": "The storage id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Storage"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Storage"}}}}}, "delete": {"tags": ["Image | server | storage services"], "description": "Delete a storage", "parameters": [{"name": "id", "in": "path", "description": "The storage id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Storage"}}}, "description": ""}}}}, "/api/storage.json": {"post": {"tags": ["Image | server | storage services"], "description": "Add a new storage", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Storage"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Storage"}}}}}, "get": {"tags": ["Image | server | storage services"], "description": "List all storages", "parameters": [{"name": "all", "in": "query", "description": "True to list storages for all users the current user has access to", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Storage"}}}}, "description": ""}}}}, "/api/sliceinstance/{id}.json": {"get": {"tags": ["Image | slice instance services"], "description": "Get an slice instance", "parameters": [{"name": "id", "in": "path", "description": "The slice instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}, "description": ""}}}, "put": {"tags": ["Image | slice instance services"], "description": "Update an slice instance", "parameters": [{"name": "id", "in": "path", "description": "The slice instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}}}, "delete": {"tags": ["Image | slice instance services"], "description": "Delete an slice instance)", "parameters": [{"name": "id", "in": "path", "description": "The slice instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}, "description": ""}}}}, "/api/imageinstance/{id}/{channel}/{zStack}/{time}/sliceinstance.json": {"get": {"tags": ["Image | slice instance services"], "description": "Get the slice instance for the given coordinates and image instance", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "zStack", "in": "path", "description": "The zStack coordinate", "required": true, "schema": {"type": "number"}}, {"name": "time", "in": "path", "description": "The time coordinate", "required": true, "schema": {"type": "number"}}, {"name": "channel", "in": "path", "description": "The channel coordinate", "required": true, "schema": {"type": "number"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}, "description": ""}}}}, "/api/imageinstance/{id}/sliceinstance.json": {"get": {"tags": ["Image | slice instance services"], "description": "Get all slice instances for the given image instance", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Slice-Instance"}}}}, "description": ""}}}}, "/api/sliceinstance/{id}/thumb.png": {"post": {"tags": ["Image | slice instance services"], "description": "Get a small image (thumb) for a specific slice", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/sliceinstance/{id}/thumb.jpg": {"post": {"tags": ["Image | slice instance services"], "description": "Get a small image (thumb) for a specific slice", "parameters": [{"name": "id", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "refresh", "in": "query", "description": "If true, don't take it from cache and regenerate it", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "The thumb max size", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image (bytes)"}}}}, "/api/sliceinstance.json": {"post": {"tags": ["Image | slice instance services"], "description": "Add a new slice instance. See 'upload file service' to upload a slice.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Slice-Instance"}}}}}}, "/api/uploadedfile/{id}.json": {"get": {"tags": ["Image | uploaded file services"], "description": "Get an uploaded file", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}, "description": ""}}}, "put": {"tags": ["Image | uploaded file services"], "description": "Edit an uploaded file domain (mainly to edit status during upload)", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}}}, "delete": {"tags": ["Image | uploaded file services"], "description": "Delete an uploaded file domain. This do not delete the file on disk.", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}, "description": ""}}}}, "/api/uploadedfile/{id}/download": {"get": {"tags": ["Image | uploaded file services"], "description": "Download the uploaded file", "parameters": [{"name": "id", "in": "path", "description": "The uploaded file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}, "description": ""}}}}, "/api/uploadedfile.json": {"post": {"tags": ["Image | uploaded file services"], "description": "Add a new uploaded file. This DOES NOT upload the file, just create the domain.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}}}, "get": {"tags": ["Image | uploaded file services"], "description": "Get all uploaded files made by the current user", "parameters": [{"name": "onlyRootsWithDetails", "in": "query", "description": "If set, only return uploaded files which are roots (no parent) with supplementary details such global size.", "required": true, "schema": {"type": "boolean"}}, {"name": "onlyRoots", "in": "query", "description": "If set, only return uploaded files which are roots (no parent).", "required": true, "schema": {"type": "boolean"}}, {"name": "parent", "in": "query", "description": "If set, only return uploaded files having the given parent.", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "root", "in": "query", "description": "If set, only return uploaded files which are children of the given root. Returned attributes are a subset of uploaded files attributes.", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "all", "in": "query", "description": "True to list uploaded files for all users the current user has access to", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Uploaded-file"}}}, "description": ""}}}}, "/api/imaging_server/{id}.json": {"get": {"tags": ["Imaging | imaging server"], "description": "Get an imaging server", "parameters": [{"name": "id", "in": "path", "description": "The imaging server id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "imaging server"}}}, "delete": {"tags": ["Imaging | imaging server"], "description": "Delete an imaging server.", "parameters": [{"name": "id", "in": "path", "description": "The imaging server id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "imaging server"}}}}, "/api/imaging_server.json": {"post": {"tags": ["Imaging | imaging server"], "description": "Add a new imaging server to cytomine.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "imaging server"}}}, "get": {"tags": ["Imaging | imaging server"], "description": "List the imaging servers", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "imaging server"}}}}, "/api/sample/{id}.json": {"get": {"tags": ["Laboratory | sample services"], "description": "Get a sample", "parameters": [{"name": "id", "in": "path", "description": "The sample id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sample"}}}, "description": ""}}}, "put": {"tags": ["Laboratory | sample services"], "description": "Update a sample", "parameters": [{"name": "id", "in": "path", "description": "The sample id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sample"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sample"}}}}}, "delete": {"tags": ["Laboratory | sample services"], "description": "Delete a sample", "parameters": [{"name": "id", "in": "path", "description": "The sample id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sample"}}}, "description": ""}}}}, "/api/sample.json": {"post": {"tags": ["Laboratory | sample services"], "description": "Add a new sample", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sample"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sample"}}}}}, "get": {"tags": ["Laboratory | sample services"], "description": "Get all sample available for the current user", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Sample"}}}}, "description": ""}}}}, "/api/amqp_queue_config_instance/{id}.json": {"get": {"tags": ["Middleware | AMPQ Queue Configuration instance services"], "description": "Get the value for a parameter for a specific queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}, "description": ""}}}, "put": {"tags": ["Middleware | AMPQ Queue Configuration instance services"], "description": "Update an already existing configuration for a specific queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}}}, "delete": {"tags": ["Middleware | AMPQ Queue Configuration instance services"], "description": "Delete a configuration for a specific queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}, "description": ""}}}}, "/api/amqp_queue/{id}/amqp_queue_config_instance.json": {"get": {"tags": ["Middleware | AMPQ Queue Configuration instance services"], "description": "List all parameters/configurations by queue", "parameters": [{"name": "id", "in": "path", "description": "The queue id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}}, "description": ""}}}}, "/api/amqp_queue_config_instance.json": {"post": {"tags": ["Middleware | AMPQ Queue Configuration instance services"], "description": "Add a new value for a configuration and a specific queue", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}}}, "get": {"tags": ["Middleware | AMPQ Queue Configuration instance services"], "description": "Get all the parameters for the queues in the system", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AMQP-Queue-Config-Instance"}}}}, "description": ""}}}}, "/api/amqp_queue_config/name/{name}.json": {"get": {"tags": ["Middleware | AMQP Queue Configuration services"], "description": "Get a queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "name", "in": "path", "description": "The parameter name", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}, "description": ""}}}}, "/api/amqp_queue_config.json": {"post": {"tags": ["Middleware | AMQP Queue Configuration services"], "description": "Add a configuration for a queue", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}}}, "get": {"tags": ["Middleware | AMQP Queue Configuration services"], "description": "Get all possible parameters for an AMQP queue", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}}, "description": ""}}}}, "/api/amqp_queue_config/{id}.json": {"put": {"tags": ["Middleware | AMQP Queue Configuration services"], "description": "Update a configuration based on an id", "parameters": [{"name": "id", "in": "path", "description": "The configuration id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}}}, "delete": {"tags": ["Middleware | AMQP Queue Configuration services"], "description": "Delete a configuration based on an id", "parameters": [{"name": "id", "in": "path", "description": "The configuration id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue-Config"}}}, "description": ""}}}}, "/api/amqp_queue/name/{name}.json": {"get": {"tags": ["Middleware | AMQP Queue services"], "description": "Get a queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The queue id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "name", "in": "path", "description": "The queue name", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue"}}}, "description": ""}}}}, "/api/amqp_queue.json": {"post": {"tags": ["Middleware | AMQP Queue services"], "description": "Add a queue", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue"}}}}}, "get": {"tags": ["Middleware | AMQP Queue services"], "description": "Get active queues (either all of them or based on their name)", "parameters": [{"name": "name", "in": "path", "description": "The name (or a part) of the queue", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AMQP-Queue"}}}}, "description": ""}}}}, "/api/amqp_queue/{id}.json": {"put": {"tags": ["Middleware | AMQP Queue services"], "description": "Update a queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The queue id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue"}}}}}, "delete": {"tags": ["Middleware | AMQP Queue services"], "description": "Delete a queue based on an id", "parameters": [{"name": "id", "in": "path", "description": "The queue id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AMQP-Queue"}}}, "description": ""}}}}, "/api/imageserver/{id}.json": {"get": {"tags": ["Middleware | image server"], "description": "Get an image server", "parameters": [{"name": "id", "in": "path", "description": "The image server id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-server"}}}, "description": ""}}}}, "/api/imageserver.json": {"get": {"tags": ["Middleware | image server"], "description": "List image servers", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-server"}}}}, "description": ""}}}}, "/api/message_broker_server/{id}.json": {"get": {"tags": ["Middleware | message broker server services"], "description": "Get a message broker server based on an id", "parameters": [{"name": "id", "in": "path", "description": "The message broker server id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message-broker-server"}}}, "description": ""}}}, "put": {"tags": ["Middleware | message broker server services"], "description": "Update a message broker server based on an id", "parameters": [{"name": "id", "in": "path", "description": "The message broker server id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message-broker-server"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message-broker-server"}}}}}, "delete": {"tags": ["Middleware | message broker server services"], "description": "Delete a message broker server based on an id", "parameters": [{"name": "id", "in": "path", "description": "The message broker server id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message-broker-server"}}}, "description": ""}}}}, "/api/message_broker_server.json": {"post": {"tags": ["Middleware | message broker server services"], "description": "Add a message broker server", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message-broker-server"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message-broker-server"}}}}}, "get": {"tags": ["Middleware | message broker server services"], "description": "Get message broker servers available that contains a specific name", "parameters": [{"name": "name", "in": "path", "description": "The name of the message broker server", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Message-broker-server"}}}}, "description": ""}}}}, "/api/algoannotation/{id}.json": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get an algo annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}, "description": ""}}}, "put": {"tags": ["Ontology | algo annotation services"], "description": "Update an algo annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}}}, "delete": {"tags": ["Ontology | algo annotation services"], "description": "Delete an algo annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}, "description": ""}}}}, "/api/project/{project}/algoannotation/count.json": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Count the number of annotation in the project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only count the annotations created after this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only count the annotations created before this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/algoannotation/{id}/mask.png": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get an alpha mask of an automatic annotation (image area framing annotation). Equivalent to crop with 'alphaMask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation/{id}/alphamask.png": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a binary mask of an automatic annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation/{id}/alphamask.jpg": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a binary mask of an automatic annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation/{id}/alphamask.tiff": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a binary mask of an automatic annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation/{annotation}/comment/{id}.json": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a specific comment", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "The comment id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}, "description": ""}}}}, "/api/algoannotation/{annotation}/comment.json": {"post": {"tags": ["Ontology | algo annotation services"], "description": "Add comment on an annotation to other user and send a mail to users", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: comment", "in": "query", "description": "The comment", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: sender", "in": "query", "description": "The user id who share the annotation", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: subject", "in": "query", "description": "The subject of the mail that will be send", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: from", "in": "query", "description": "The username of the user who send the mail", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: receivers", "in": "query", "description": "The list of user (id) to send the mail", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "POST JSON: emails", "in": "query", "description": "The list of emails to send the mail. Used (and mandatory) if receivers is null", "required": false, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "POST JSON: annotationURL ", "in": "query", "description": "The URL of the annotation in the image viewer", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: shareAnnotationURL", "in": "query", "description": "The URL of the comment", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}, "get": {"tags": ["Ontology | algo annotation services"], "description": "Get all comments on annotation", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Algo-annotation"}}}}, "description": ""}}}}, "/api/project/{id}/algoannotation/download": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Download a report (pdf, xls,...) with software annotation data from a specific project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "The annotation terms id (if empty: all terms)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "users", "in": "query", "description": "The annotation users id (if empty: all users)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "images", "in": "query", "description": "The annotation images id (if empty: all images)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "afterThan", "in": "query", "description": "(Optional) Annotations created before this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "(Optional) Annotations created after this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "format", "in": "query", "description": "The report format (pdf, xls,...)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/algoannotation/{id}/crop.png": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a crop of an automatic annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation/{id}/crop.jpg": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a crop of an automatic annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation/{id}/crop.tiff": {"get": {"tags": ["Ontology | algo annotation services"], "description": "Get a crop of an automatic annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/algoannotation.json": {"post": {"tags": ["Ontology | algo annotation services"], "description": "Add one (body is a JSON object) or multiple (body is a JSON array) algo annotations", "parameters": [{"name": "POST JSON: project", "in": "path", "description": "The project id where this annotation belongs", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: image", "in": "query", "description": "The image instance id where this annotation belongs", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: location", "in": "query", "description": "The WKT geometrical description of the annotation", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: term", "in": "query", "description": "Term id to associate with this annotation", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: minPoint", "in": "query", "description": "Minimum number of point that constitute the annotation", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "POST JSON: maxPoint", "in": "query", "description": "Maximum number of point that constitute the annotation", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Algo-annotation"}}}}}, "get": {"tags": ["Ontology | algo annotation services"], "description": "List all software annotation visible for the current user. See 'annotation domain' data for parameters (only show/hide parameters are available for this service). ", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[annotation listing]"}}}}, "/api/annotationfilter/{id}.json": {"get": {"tags": ["Ontology | annotation filter services"], "description": "Get an annotation filter", "parameters": [{"name": "id", "in": "path", "description": "The filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-filter"}}}, "description": ""}}}, "put": {"tags": ["Ontology | annotation filter services"], "description": "Update a filter", "parameters": [{"name": "id", "in": "path", "description": "The filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-filter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-filter"}}}}}, "delete": {"tags": ["Ontology | annotation filter services"], "description": "Delete a filter", "parameters": [{"name": "id", "in": "path", "description": "The filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-filter"}}}, "description": ""}}}}, "/api/ontology/{idOntology}/annotationfilter.json": {"get": {"tags": ["Ontology | annotation filter services"], "description": "Get all annotation filters available for an ontology ", "parameters": [{"name": "idOntology", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Annotation-filter"}}}}, "description": ""}}}}, "/api/annotationfilter.json": {"get": {"tags": ["Ontology | annotation filter services"], "description": "Get all annotation filters available for a specific project ", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Annotation-filter"}}}}, "description": ""}}}, "post": {"tags": ["Ontology | annotation filter services"], "description": "Add a filter", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-filter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-filter"}}}}}}, "/api/sliceinstance/{id}/annotationindex.json": {"get": {"tags": ["Ontology | annotation index services"], "description": "Get all index entries for a slice", "parameters": [{"name": "id", "in": "path", "description": "The slice id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Annotation-index"}}}}, "description": ""}}}}, "/api/annotation/{idannotation}/term/{idterm}/user/{idUser}.json": {"get": {"tags": ["Ontology | annotation term services"], "description": "Get an annotation term", "parameters": [{"name": "idannotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "(Optional) The user id. If null, it will consider the annotation-term of all users", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-term"}}}, "description": ""}}}, "delete": {"tags": ["Ontology | annotation term services"], "description": "Delete an annotation term", "parameters": [{"name": "idannotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "(Optional) The user id. If null, it will consider the current user", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-term"}}}, "description": ""}}}}, "/api/userannotation/{idannotation}/user/{idUser}/term.json": {"get": {"tags": ["Ontology | annotation term services"], "description": "Get all annotationterm for an annotation", "parameters": [{"name": "idannotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "(Optional) Only get term from this user id (may be a job)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Annotation-term"}}}}, "description": ""}}}}, "/api/annotation/{idannotation}/notuser/{idNotUser}/term.json": {"get": {"tags": ["Ontology | annotation term services"], "description": "Get all annotationterm for an annotation except annotationterm from the user in param", "parameters": [{"name": "idannotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idNotUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Annotation-term"}}}}, "description": ""}}}}, "/api/annotation/{idannotation}/term/{idterm}/clearBefore.json": {"post": {"tags": ["Ontology | annotation term services"], "description": "Add an annotation term and delete all other term added to this annotation by this user", "parameters": [{"name": "idannotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "clearForAll", "in": "query", "description": "Delete term for all users (no algo)", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-term"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-term"}}}}}}, "/api/annotation/{idannotation}/term/{idterm}.json": {"post": {"tags": ["Ontology | annotation term services"], "description": "Add an annotation term", "parameters": [{"name": "idannotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-term"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-term"}}}}}}, "/api/annotationtrack/{annotation}/{track}.json": {"get": {"tags": ["Ontology | annotation track services"], "description": "Get an annotation track", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "track", "in": "path", "description": "The track id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnotationTrack"}}}, "description": ""}}}, "delete": {"tags": ["Ontology | annotation track services"], "description": "Remove an annotation from a track", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "track", "in": "path", "description": "The track id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnotationTrack"}}}, "description": ""}}}}, "/api/annotation/{id}/annotationtrack.json": {"get": {"tags": ["Ontology | annotation track services"], "description": "Get all annotationTrack for an annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AnnotationTrack"}}}}, "description": ""}}}}, "/api/track/{id}/annotationtrack.json": {"get": {"tags": ["Ontology | annotation track services"], "description": "Get all annotationTrack for a track", "parameters": [{"name": "id", "in": "path", "description": "The track id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/AnnotationTrack"}}}}, "description": ""}}}}, "/api/annotationtrack.json": {"post": {"tags": ["Ontology | annotation track services"], "description": "Get an annotation-track relation", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnotationTrack"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnotationTrack"}}}}}}, "/api/annotation/{id}.json": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get an annotation, this works for all kind of annotation (user/algo/reviewed). It's better to avoid the user of this method if we know the correct type of an annotation id. Annotation x => annotation/x.json is slower than userannotation/x.json or algoannotation/x.json", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "annotation domain"}}}, "put": {"tags": ["Ontology | generic annotation services"], "description": "Update an annotation. This works for all kind of annotation (user/algo/reviewed)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "fill", "in": "query", "description": "(Optional, default: false) If true, fill holes in annotation", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "annotation domain"}}}, "delete": {"tags": ["Ontology | generic annotation services"], "description": "Delete an annotation (only user/algo)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "annotation domain"}}}}, "/api/imageinstance/{idImage}/annotation/included.json": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get all annotation that intersect a geometry or another annotation. See /annotation/search for extra parameter (show/hide). ", "parameters": [{"name": "idImage", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "geometry", "in": "query", "description": "(Optional) WKT form of the geometry (if not set, set annotation param)", "required": true, "schema": {"type": "string"}}, {"name": "annotation", "in": "query", "description": "(Optional) The annotation id for the geometry (if not set, set geometry param)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "The annotation user id (may be an algo) ", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "The annotation terms id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/annotation/{id}/cropMin.json": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get annotation crop with minimal size (256*256max)  (image area that frame annotation). This work for all kinds of annotations.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/simplify.json": {"post": {"tags": ["Ontology | generic annotation services"], "description": "Simplify and return a form. The number of points of the resulting form is not garantee to be between minPoint and maxPoint (best effort)", "parameters": [{"name": "minPoint", "in": "query", "description": "Minimum number of point", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "maxPoint", "in": "query", "description": "Maximum number of point", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "JSON POST DATA: wkt", "in": "query", "description": "WKT form to return simplify. This may be big so must be in post data (not query param)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "annotation domain"}}}}, "/api/annotationcorrection.json": {"post": {"tags": ["Ontology | generic annotation services"], "description": "Add/Remove a geometry Y to/from all annotations that intersects Y", "parameters": [{"name": "minPoint", "in": "query", "description": "Minimum number of point", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "maxPoint", "in": "query", "description": "Maximum number of point", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "JSON POST DATA: location", "in": "query", "description": "WKT form of Y", "required": true, "schema": {"type": "string"}}, {"name": "JSON POST DATA: review", "in": "query", "description": "Only get reviewed annotation", "required": true, "schema": {"type": "boolean"}}, {"name": "JSON POST DATA: image", "in": "query", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "JSON POST DATA: remove", "in": "query", "description": "Add or remove Y", "required": true, "schema": {"type": "boolean"}}, {"name": "JSON POST DATA: layers", "in": "query", "description": "List of layers id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "JSON POST DATA: annotation", "in": "query", "description": "The annotation to correct (if specified, only this annotation will be changed; image and layers parameters will be ignored)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "annotation domain"}}}}, "/api/project/{id}/annotation/download": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Download a report (pdf, xls,...) with software annotation data from a specific project.", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "reviewed", "in": "query", "description": "Get only reviewed annotation", "required": true, "schema": {"type": "boolean"}}, {"name": "terms", "in": "query", "description": "The annotation terms id (if empty: all terms)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "users", "in": "query", "description": "The annotation users id (if empty: all users). If reviewed flag is false then if first user is software, get algo annotation otherwise if first user is human, get user annotation. ", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "images", "in": "query", "description": "The annotation images id (if empty: all images)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "afterThan", "in": "query", "description": "(Optional) Annotations created before this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "(Optional) Annotations created after this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "format", "in": "query", "description": "The report format (pdf, xls,...)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/annotation/{id}/crop.png": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get a crop of an annotation (image area framing annotation). It works for all kinds of annotation but slower than a direct call to a specific kind of annotation.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/annotation/{id}/crop.jpg": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get a crop of an annotation (image area framing annotation). It works for all kinds of annotation but slower than a direct call to a specific kind of annotation.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/annotation/{id}/crop.tiff": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get a crop of an annotation (image area framing annotation). It works for all kinds of annotation but slower than a direct call to a specific kind of annotation.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/annotation/{id}/fill": {"post": {"tags": ["Ontology | generic annotation services"], "description": "Fill an annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "annotation domain"}}}}, "/api/annotation/{id}/simplify.json": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Simplify an existing annotation form (reducing the number of point). The number of points of the resulting form is not garantee to be between minPoint and maxPoint (best effort)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "minPoint", "in": "query", "description": "Minimum number of point", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "maxPoint", "in": "query", "description": "Maximum number of point", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "annotation domain"}}}}, "/api/imageinstance/{idImage}/annotation/included/download": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Get all annotation that intersect a geometry or another annotation. Unlike the simple list, extra parameter (show/hide) are not available. ", "parameters": [{"name": "idImage", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "geometry", "in": "query", "description": "(Optional) WKT form of the geometry (if not set, set annotation param)", "required": true, "schema": {"type": "string"}}, {"name": "annotation", "in": "query", "description": "(Optional) The annotation id for the geometry (if not set, set geometry param)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "The annotation user id (may be an algo) ", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "The annotation terms id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/annotation/method/download": {"get": {"tags": ["Ontology | generic annotation services"], "description": "Download report for annotation. !!! See doc for /annotation/search to filter annotations!!!", "parameters": [{"name": "format", "in": "query", "description": "(Optional) Output file format (pdf, xls,...)", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/annotation.json": {"post": {"tags": ["Ontology | generic annotation services"], "description": "Add an annotation (only available for user/algo). If current user is algo, an algo annotation will be created. Otherwise, an user annotation", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "annotation domain"}}}}, "/api/annotation/search.json": {"post": {"tags": ["Ontology | generic annotation services"], "description": "Search service for all annotation type. By default All fields are not visible (optim), you need to select fields using show/hideXXX query parameters.", "parameters": [{"name": "showDefault", "in": "query", "description": "(Optional) If true, show 'basic', 'meta', and 'term' properties group. See showBasic/Meta/... for more information (default: true ONLY IF NO OTHER show/hideXXX are set)", "required": true, "schema": {"type": "boolean"}}, {"name": "showBasic", "in": "query", "description": "(Optional) If true, show basic properties group (id, class...)", "required": true, "schema": {"type": "boolean"}}, {"name": "hideBasic", "in": "query", "description": "(Optional) If true, hide basic properties group (id, class...)", "required": true, "schema": {"type": "boolean"}}, {"name": "showMeta", "in": "query", "description": "(Optional) If true, show meta properties group (urls, image id, project id,...)", "required": true, "schema": {"type": "boolean"}}, {"name": "hideMeta", "in": "query", "description": "(Optional) If true, hide meta properties group (urls, image id, project id,...)", "required": true, "schema": {"type": "boolean"}}, {"name": "showWKT", "in": "query", "description": "(Optional) If true, show the location WKT properties.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideWKT", "in": "query", "description": "(Optional) If true, hide the location WKT properties.", "required": true, "schema": {"type": "boolean"}}, {"name": "showGIS", "in": "query", "description": "(Optional) If true, show the form GIS field (area, centroid,...). This may slow down the request!.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideGIS", "in": "query", "description": "(Optional) If true, hide the form GIS field (area, centroid,...). This may slow down the request!.", "required": true, "schema": {"type": "boolean"}}, {"name": "showTerm", "in": "query", "description": "(Optional) If true, show the term properties (id, user who add the term,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideTerm", "in": "query", "description": "(Optional) If true, hide the term properties (id, user who add the term,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "showAlgo", "in": "query", "description": "(Optional) If true, show the algo details (job,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideAlgo", "in": "query", "description": "(Optional) If true, hide the algo details (job,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "showUser", "in": "query", "description": "(Optional) If true, show the annotation user details (username,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideUser", "in": "query", "description": "(Optional) If true, hide the annotation user details (username,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "showImage", "in": "query", "description": "(Optional) If true, show the annotation image details (filename,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideImage", "in": "query", "description": "(Optional) If true, hide the annotation image details (filename,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "showSlice", "in": "query", "description": "(Optional) If true, show the annotation slice details (c,z,t,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideSlice", "in": "query", "description": "(Optional) If true, hide the annotation slice details (c,z,t,...). This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "showTrack", "in": "query", "description": "(Optional) If true, show the annotation track details. This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "hideTrack", "in": "query", "description": "(Optional) If true, hide the annotation track details. This may slow down the request.", "required": true, "schema": {"type": "boolean"}}, {"name": "project", "in": "query", "description": "(Optional) Get only annotation for this project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "job", "in": "query", "description": "(Optional) Get only annotation for this job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "(Optional) Get only annotation for this user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "users", "in": "query", "description": "(Optional) Get only annotation for these users id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "term", "in": "query", "description": "(Optional) Get only annotation link with this term id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "(Optional) Get only annotation for these terms id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "noTerm", "in": "query", "description": "(Optional) Also get annotation with no term", "required": true, "schema": {"type": "boolean"}}, {"name": "noAlgoTerm", "in": "query", "description": "(Optional) Only get annotation with no term from a job", "required": true, "schema": {"type": "boolean"}}, {"name": "multipleTerm", "in": "query", "description": "(Optional) Only get annotation with multiple terms", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "image", "in": "query", "description": "(Optional) Get only annotation for this image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "images", "in": "query", "description": "(Optional) Get only annotation for these images id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "slice", "in": "query", "description": "(Optional) Get only annotation for this slice id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "slices", "in": "query", "description": "(Optional) Get only annotation for these slices id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "track", "in": "query", "description": "(Optional) Get only annotation for this track id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "tracks", "in": "query", "description": "(Optional) Get only annotation for these tracks id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "noTrack", "in": "query", "description": "(Optional) Also get annotation with no track", "required": true, "schema": {"type": "boolean"}}, {"name": "multipleTrack", "in": "query", "description": "(Optional) Only get annotation with multiple tracks", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterSlice", "in": "query", "description": "(Optional) Only to be used with track(s), return only annotation in the track(s) after the given slice", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeSlice", "in": "query", "description": "(Optional) Only to be used with track(s), return only annotation in the track(s) before the given slice", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "sliceDirection", "in": "query", "description": "Only to be used with beforeSlice, afterSlice or aroundSlide and mandatory in this case. Give the dimension to follow in the image. Accepted values: C,Z,T", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "tags", "in": "query", "description": "(Optional) Get only annotation associated with these tags", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "tag", "in": "query", "description": "(Optional) Get only annotation associated with this tag", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "noTag", "in": "query", "description": "(Optional) Also get annotation with no tag", "required": true, "schema": {"type": "boolean"}}, {"name": "suggestedTerm", "in": "query", "description": "(Optional) Get only annotation suggested by for this term by a job", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "suggestedTerms", "in": "query", "description": "(Optional) Get only annotation suggested by for these terms by a job", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "userForTerm", "in": "query", "description": "(Optional) Get only user annotation link with a term added by this user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "userForTermAlgo", "in": "query", "description": "(Optional) Get only user annotation link with a term added by this job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "jobForTermAlgo", "in": "query", "description": "(Optional) Get only annotation link with a term added by this job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "reviewed", "in": "query", "description": "(Optional) Get only reviewed annotations", "required": true, "schema": {"type": "boolean"}}, {"name": "reviewUsers", "in": "query", "description": "(Optional) Get only annotation reviewed by these users", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "notReviewedOnly", "in": "query", "description": "(Optional) Only get annotation not reviewed", "required": true, "schema": {"type": "boolean"}}, {"name": "kmeans", "in": "query", "description": "(Optional) Enable or not kmeans (only for GUI)", "required": true, "schema": {"type": "boolean"}}, {"name": "kmeansValue", "in": "query", "description": "(Optional) Only used for GUI ", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bbox", "in": "query", "description": "(Optional) Get only annotations having intersection with the bbox (WKT)", "required": true, "schema": {"type": "string"}}, {"name": "bboxAnnotation", "in": "query", "description": "(Optional) Get only annotations having intersection with this annotation", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "baseAnnotation", "in": "query", "description": "(Optional) The base annotation for spatial request (annotation id or wkt location)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxDistanceBaseAnnotation", "in": "query", "description": "(Optional) Only get annotation inside the max distance", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterThan", "in": "query", "description": "(Optional) Annotations created before this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "(Optional) Annotations created after this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "[annotation listing]"}}}}, "/api/ontology/{id}.json": {"get": {"tags": ["Ontology | ontology services"], "description": "Get an ontology", "parameters": [{"name": "id", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ontology"}}}, "description": ""}}}, "put": {"tags": ["Ontology | ontology services"], "description": "Update an ontology", "parameters": [{"name": "id", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ontology"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ontology"}}}}}, "delete": {"tags": ["Ontology | ontology services"], "description": "Delete an ontology", "parameters": [{"name": "id", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "path", "description": "(Optional, default:null) The id of the task to update during process", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ontology"}}}, "description": ""}}}}, "/api/ontology.json": {"post": {"tags": ["Ontology | ontology services"], "description": "Add an ontology", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ontology"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Ontology"}}}}}, "get": {"tags": ["Ontology | ontology services"], "description": "Get all ontologies available", "parameters": [{"name": "light", "in": "query", "description": "(Optional, default false) Only get a light list (with no term tree for each ontologies)", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Ontology"}}}}, "description": ""}}}}, "/api/annotation/{idAnnotation}/property.json": {"get": {"tags": ["Ontology | property services"], "description": "Get all properties for an annotation (algo,user, or reviewed)", "parameters": [{"name": "idAnnotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}, "post": {"tags": ["Ontology | property services"], "description": "Add a property to an annotation", "parameters": [{"name": "idAnnotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}}}}, "/api/imageinstance/{idImageInstance}/property.json": {"get": {"tags": ["Ontology | property services"], "description": "Get all properties for an image instance", "parameters": [{"name": "idImageInstance", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}, "post": {"tags": ["Ontology | property services"], "description": "Add a property to a image instance", "parameters": [{"name": "idImageInstance", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}}}}, "/api/annotation/property/key.json": {"get": {"tags": ["Ontology | property services"], "description": "Get all keys of annotation properties in a project or image", "parameters": [{"name": "idProject", "in": "query", "description": "(Optional, if null idImage must be set) The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idImage", "in": "query", "description": "(Optional, if null idProject must be set) The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "(Optional) if true, we will return the id of the creator of each key", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}}, "/api/imageinstance/property/key.json": {"get": {"tags": ["Ontology | property services"], "description": "Get all keys of images properties in a project", "parameters": [{"name": "idProject", "in": "query", "description": "(Optional, if null idImage must be set) The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}}, "/api/user/{idUser}/imageinstance/{idImage}/annotationposition.json": {"get": {"tags": ["Ontology | property services"], "description": "For a specific key, Get all annotation centroid (x,y) and the corresponding value for an image and a layer (user)", "parameters": [{"name": "idImage", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The layer id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key", "in": "query", "description": "The properties key", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "bbox", "in": "query", "description": "(Optional) Form of the restricted area", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}}, "/api/project/{idProject}/property/{id}.json": {"get": {"tags": ["Ontology | property services"], "description": "Get a project property with its id or its key", "parameters": [{"name": "idProject", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "(Optional, if null key must be set) The property id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key", "in": "path", "description": "(Optional, if null id must be set) The property key", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}}}, "/api/domain/{domainClassName}/{domainIdent}/property/{id}.json": {"get": {"tags": ["Ontology | property services"], "description": "Get an abstract image property with its id or its key", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain type", "required": true, "schema": {"type": "string"}}, {"name": "id", "in": "path", "description": "(Optional, if null key must be set) The property id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key", "in": "path", "description": "(Optional, if null id must be set) The property key", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}}, "put": {"tags": ["Ontology | property services"], "description": "Edit a property", "parameters": [{"name": "idAnnotation", "in": "path", "description": "(Optional) The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idImageInstance", "in": "path", "description": "(Optional) The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idProject", "in": "path", "description": "(Optional) The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "The property id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainIdent", "in": "path", "description": "(Optional) The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "(Optional) The domain type", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}}}, "delete": {"tags": ["Ontology | property services"], "description": "Delete a property", "parameters": [{"name": "id", "in": "path", "description": "The property id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainIdent", "in": "path", "description": "(Optional) The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "(Optional) The domain type", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}}}, "/api/annotation/{idAnnotation}/property/{id}.json": {"get": {"tags": ["Ontology | property services"], "description": "Get a project property with its id or its key", "parameters": [{"name": "idAnnotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "(Optional, if null key must be set) The property id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key", "in": "path", "description": "(Optional, if null id must be set) The property key", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}}}, "/api/imageinstance/{idImageInstance}/property/{id}.json": {"get": {"tags": ["Ontology | property services"], "description": "Get an image instance property with its id or its key", "parameters": [{"name": "idImageInstance", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "(Optional, if null key must be set) The property id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "key", "in": "path", "description": "(Optional, if null id must be set) The property key", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}}}, "/api/project/{idProject}/property.json": {"post": {"tags": ["Ontology | property services"], "description": "Add a property to a project", "parameters": [{"name": "idProject", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}}}, "get": {"tags": ["Ontology | property services"], "description": "Get all properties for a project", "parameters": [{"name": "idProject", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}}, "/api/property.json": {"post": {"tags": ["Ontology | property services"], "description": "Add a property to an generic domain", "parameters": [{"name": "idDomain", "in": "path", "description": "The abstract image id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Property"}}}}}}, "/api/domain/{domainClassName}/{domainIdent}/property.json": {"get": {"tags": ["Ontology | property services"], "description": "Get all properties for a cytomine domain", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class name", "required": true, "schema": {"type": "string"}}, {"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Property"}}}}, "description": ""}}}}, "/api/relation/{id}.json": {"get": {"tags": ["Ontology | relation services"], "description": "Get a relation", "parameters": [{"name": "id", "in": "path", "description": "The relation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Relation"}}}, "description": ""}}}}, "/api/relation.json": {"get": {"tags": ["Ontology | relation services"], "description": "List all relation available", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Relation"}}}}, "description": ""}}}}, "/api/relation/parent/term1/{idterm1}/term2/{idterm2}.json": {"get": {"tags": ["Ontology | relation term services"], "description": "Get a project property with its id or its key", "parameters": [{"name": "idrelation", "in": "path", "description": "The relation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm1", "in": "path", "description": "The term 1 id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm2", "in": "path", "description": "The term 2 id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Relation-term"}}}, "description": ""}}}, "delete": {"tags": ["Ontology | relation term services"], "description": "Delete a relation between two terms", "parameters": [{"name": "idrelation", "in": "path", "description": "The relation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm1", "in": "path", "description": "The term 1", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idterm2", "in": "path", "description": "The term 2", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Relation-term"}}}, "description": ""}}}}, "/api/relation/term/{id}.json": {"get": {"tags": ["Ontology | relation term services"], "description": "List all relation for a specific term", "parameters": [{"name": "id", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "i", "in": "path", "description": "The position index (1 or 2)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Relation-term"}}}}, "description": ""}}}}, "/api/relation/term/{i}/{id}.json": {"get": {"tags": ["Ontology | relation term services"], "description": "List all relation for a specific term and position (1 or 2)", "parameters": [{"name": "id", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "i", "in": "path", "description": "The position index (1 or 2)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Relation-term"}}}}, "description": ""}}}}, "/api/relation/parent/term.json": {"post": {"tags": ["Ontology | relation term services"], "description": "Add a relation between two terms. If not set, relation is PARENT", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Relation-term"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Relation-term"}}}}}}, "/api/reviewedannotation/{id}.json": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a reviewed annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}}, "put": {"tags": ["Ontology | reviewed annotation services"], "description": "Update a reviewed annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}}}, "delete": {"tags": ["Ontology | reviewed annotation services"], "description": "Delete a reviewed annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}}}, "/api/imageinstance/{id}/review.json": {"put": {"tags": ["Ontology | reviewed annotation services"], "description": "Start to review an image. The current user will be the reviewer.", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}}}, "delete": {"tags": ["Ontology | reviewed annotation services"], "description": "Stop to review an image. ", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "cancel", "in": "query", "description": "If false, the image will be validated. If true, the image return in unreview status (only if no reviewed annotation) ", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}}}, "/api/imageinstance/{image}/reviewedannotation/stats.json": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get the number of review for each user in an image", "parameters": [{"name": "image", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}}}, "/api/imageinstance/{image}/annotation/review.json": {"put": {"tags": ["Ontology | reviewed annotation services"], "description": "Review all annotation in image for a list of user", "parameters": [{"name": "image", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "users", "in": "path", "description": "The list of users id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}}}, "delete": {"tags": ["Ontology | reviewed annotation services"], "description": "Cancel the review of all annotation in image for a list of user", "parameters": [{"name": "image", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "users", "in": "path", "description": "The list of users id", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}}}, "/api/project/{project}/reviewedannotation/count.json": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Count the number of annotation in the project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only count the annotations created after this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only count the annotations created before this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/reviewedannotation/{id}/alphamask.png": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get an alpha mask of a reviewed annotation (image area framing annotation). Equivalent to crop with 'alphaMask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/reviewedannotation/{id}/mask.png": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a binary mask of a reviewed annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/reviewedannotation/{id}/mask.jpg": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a binary mask of a reviewed annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/reviewedannotation/{id}/mask.tiff": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a binary mask of a reviewed annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/project/{id}/reviewedannotation/download": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Download a report (pdf, xls,...) with reviewed annotation data from a specific project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "The annotation terms id (if empty: all terms)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "reviewUsers", "in": "query", "description": "The annotation reviewers id (if empty: all users)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "images", "in": "query", "description": "The annotation images id (if empty: all images)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "afterThan", "in": "query", "description": "(Optional) Annotations created before this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "(Optional) Annotations created after this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "format", "in": "query", "description": "The report format (pdf, xls,...)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/reviewedannotation/{id}/crop.png": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a crop of a reviewed annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/reviewedannotation/{id}/crop.jpg": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a crop of a reviewed annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/reviewedannotation/{id}/crop.tiff": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Get a crop of a reviewed annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/annotation/{id}/review.json": {"delete": {"tags": ["Ontology | reviewed annotation services"], "description": "Unreview (cancel the review) a user or algo annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}}, "put": {"tags": ["Ontology | reviewed annotation services"], "description": "Review a user or algo annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON (terms)", "in": "query", "description": "List of annotation terms (if null, keep term already map with this annotation by the annotation creator)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}}}}, "/api/user/{id}/reviewedannotation/count.json": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "Count the number of reviewed annotation for the current user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/user/{iduser}/reviewedannotation.json": {"post": {"tags": ["Ontology | reviewed annotation services"], "description": "Add reviewed annotation. Only use to create a reviewed annotation with all json data. Use /annotation/x/review", "parameters": [{"name": "iduser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Reviewed-annotation"}}}}}}, "/api/reviewedannotation.json": {"get": {"tags": ["Ontology | reviewed annotation services"], "description": "List all reviewed annotation available for the user", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Reviewed-annotation"}}}}, "description": ""}}}}, "/api/term/{id}.json": {"get": {"tags": ["Ontology | term services"], "description": "Get a term", "parameters": [{"name": "id", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Term"}}}, "description": ""}}}, "put": {"tags": ["Ontology | term services"], "description": "Update a term", "parameters": [{"name": "id", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Term"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Term"}}}}}, "delete": {"tags": ["Ontology | term services"], "description": "Delete a term", "parameters": [{"name": "id", "in": "path", "description": "The term id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Term"}}}, "description": ""}}}}, "/api/ontology/{idontology}/term.json": {"get": {"tags": ["Ontology | term services"], "description": "Get all term from an ontology", "parameters": [{"name": "idontology", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Term"}}}}, "description": ""}}}}, "/api/project/{idProject}/term.json": {"get": {"tags": ["Ontology | term services"], "description": "Get all term for a project", "parameters": [{"name": "idProject", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Term"}}}}, "description": ""}}}}, "/api/term.json": {"post": {"tags": ["Ontology | term services"], "description": "Add a term in an ontology", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Term"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Term"}}}}}, "get": {"tags": ["Ontology | term services"], "description": "List all term available", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Term"}}}}, "description": ""}}}}, "/api/track/{id}.json": {"get": {"tags": ["Ontology | track services"], "description": "Get a track", "parameters": [{"name": "id", "in": "path", "description": "The track id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}, "description": ""}}}, "put": {"tags": ["Ontology | track services"], "description": "Update a track", "parameters": [{"name": "id", "in": "path", "description": "The track id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}}}, "delete": {"tags": ["Ontology | track services"], "description": "Delete a track", "parameters": [{"name": "id", "in": "path", "description": "The track id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}, "description": ""}}}}, "/rest track/countByProject.json": {"get": {"tags": ["Ontology | track services"], "description": "Count the number of tracks in the project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only count the tracks created after this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only count the tracks created before this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/imageinstance/{id}/track.json": {"get": {"tags": ["Ontology | track services"], "description": "Get all track from an image instance", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Track"}}}}, "description": ""}}}}, "/api/project/{id}/track.json": {"get": {"tags": ["Ontology | track services"], "description": "Get all track from a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Track"}}}}, "description": ""}}}}, "/api/track.json": {"post": {"tags": ["Ontology | track services"], "description": "Add a track in an image", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Track"}}}}}}, "/api/userannotation/{id}.json": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a user annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}, "description": ""}}}, "put": {"tags": ["Ontology | user annotation services"], "description": "Update an annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}}}, "delete": {"tags": ["Ontology | user annotation services"], "description": "Delete an annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}, "description": ""}}}}, "/api/project/{project}/userannotation/count.json": {"get": {"tags": ["Ontology | user annotation services"], "description": "Count the number of annotation in the project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only count the annotations created after this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only count the annotations created before this date (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/userannotation/{id}/alphamask.png": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get an alpha mask of a user annotation (image area framing annotation). Equivalent to crop with 'alphaMask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/userannotation/{id}/mask.png": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a binary mask of a user annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/userannotation/{id}/mask.jpg": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a binary mask of a user annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/userannotation/{id}/mask.tiff": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a binary mask of a user annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/userannotation/{annotation}/comment/{id}.json": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a specific comment", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "The comment id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}, "description": ""}}}}, "/api/userannotation/{annotation}/comment.json": {"post": {"tags": ["Ontology | user annotation services"], "description": "Add comment on an annotation to other user and send a mail to users", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: comment", "in": "query", "description": "The comment", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: sender", "in": "query", "description": "The user id who share the annotation", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: subject", "in": "query", "description": "The subject of the mail that will be send", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: from", "in": "query", "description": "The username of the user who send the mail", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: receivers", "in": "query", "description": "The list of user (id) to send the mail", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "POST JSON: emails", "in": "query", "description": "The list of emails to send the mail. Used if receivers is null", "required": false, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "POST JSON: annotationURL ", "in": "query", "description": "The URL of the annotation in the image viewer", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: shareAnnotationURL", "in": "query", "description": "The URL of the comment", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}, "get": {"tags": ["Ontology | user annotation services"], "description": "Get all comments on annotation", "parameters": [{"name": "annotation", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User-annotation"}}}}, "description": ""}}}}, "/api/project/{id}/userannotation/download": {"get": {"tags": ["Ontology | user annotation services"], "description": "Download a report (pdf, xls,...) with user annotation data from a specific project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "The annotation terms id (if empty: all terms)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "users", "in": "query", "description": "The annotation users id (if empty: all users)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "images", "in": "query", "description": "The annotation images id (if empty: all images)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "afterThan", "in": "query", "description": "(Optional) Annotations created before this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "(Optional) Annotations created after this date will not be returned", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "format", "in": "query", "description": "The report format (pdf, xls,...)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/userannotation/{id}/crop.png": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a crop of a user annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/userannotation/{id}/crop.jpg": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a crop of a user annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/userannotation/{id}/crop.tiff": {"get": {"tags": ["Ontology | user annotation services"], "description": "Get a crop of a user annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/user/{id}/userannotation/count.json": {"get": {"tags": ["Ontology | user annotation services"], "description": "Count the number of annotation for the current user", "parameters": [{"name": "id", "in": "path", "description": "The user id (mandatory)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/userannotation.json": {"post": {"tags": ["Ontology | user annotation services"], "description": "Add an annotation created by user", "parameters": [{"name": "POST JSON: project", "in": "path", "description": "The project id where this annotation belongs", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: image", "in": "query", "description": "The image instance id where this annotation belongs", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: location", "in": "query", "description": "The WKT geometrical description of the annotation", "required": true, "schema": {"type": "string"}}, {"name": "POST JSON: term", "in": "query", "description": "Term id to associate with this annotation", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "POST JSON: minPoint", "in": "query", "description": "Minimum number of point that constitute the annotation", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "POST JSON: maxPoint", "in": "query", "description": "Maximum number of point that constitute the annotation", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-annotation"}}}}}, "get": {"tags": ["Ontology | user annotation services"], "description": "List all annotation (very light format)", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User-annotation"}}}}, "description": ""}}}}, "/api/project/{project}/imagefilterproject.json": {"get": {"tags": ["Processing | image filter project services"], "description": "List all image filter project for a specific project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-filter-project"}}}}, "description": ""}}}}, "/api/imagefilterproject.json": {"post": {"tags": ["Processing | image filter project services"], "description": "Add an image filter to a project", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-filter-project"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-filter-project"}}}}}, "get": {"tags": ["Processing | image filter project services"], "description": "List all image filter project", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-filter-project"}}}}, "description": ""}}}}, "/api/imagefilterproject/{id}.json": {"delete": {"tags": ["Processing | image filter project services"], "description": "Delete an image filter from a project", "parameters": [{"name": "id", "in": "path", "description": "The image filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-filter-project"}}}, "description": ""}}}}, "/api/project/imagefilter/{id}.json": {"get": {"tags": ["Processing | image filter services"], "description": "Get an image filter", "parameters": [{"name": "id", "in": "path", "description": "The image filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-filter"}}}, "description": ""}}}}, "/api/imagefilter.json": {"post": {"tags": ["Processing | image filter services"], "description": "Add a new imageFilter to cytomine.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-filter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Image-filter"}}}}}}, "/api/imagefilter/{id}.json": {"delete": {"tags": ["Processing | image filter services"], "description": "Delete an imageFilter.", "parameters": [{"name": "id", "in": "path", "description": "The imageFilter id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-filter"}}}}, "description": ""}}}}, "/api/project/imagefilter.json": {"get": {"tags": ["Processing | image filter services"], "description": "List all image filter", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Image-filter"}}}}, "description": ""}}}}, "/api/jobdata/{id}.json": {"get": {"tags": ["Processing | job data services"], "description": "Get a specific data file info", "parameters": [{"name": "id", "in": "path", "description": "The job data id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}}, "put": {"tags": ["Processing | job data services"], "description": "Edit a job data", "parameters": [{"name": "id", "in": "path", "description": "The job data id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}}}, "delete": {"tags": ["Processing | job data services"], "description": "Delete a job data", "parameters": [{"name": "id", "in": "path", "description": "The job data id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}}}, "/api/jobdata/{id}/download": {"get": {"tags": ["Processing | job data services"], "description": "Download a job data file", "parameters": [{"name": "id", "in": "path", "description": "The job data id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}}}, "/api/jobdata/{id}/upload": {"post": {"tags": ["Processing | job data services"], "description": "Upload and add file to a job data", "parameters": [{"name": "id", "in": "path", "description": "The job data id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}}}}, "/api/jobdata/{id}/view": {"get": {"tags": ["Processing | job data services"], "description": "View a job data file in the browser", "parameters": [{"name": "id", "in": "path", "description": "The job data id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}}}, "/api/job/{id}/jobdata.json": {"get": {"tags": ["Processing | job data services"], "description": "Get all data for a job", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job-data"}}}}, "description": ""}}}}, "/api/jobdata.json": {"post": {"tags": ["Processing | job data services"], "description": "Add a new data file description. After that, call then 'upload' action to upload the file", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-data"}}}}}, "get": {"tags": ["Processing | job data services"], "description": "Get all job data", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job-data"}}}}, "description": ""}}}}, "/api/jobparameter/{id}.json": {"get": {"tags": ["Processing | job parameter services"], "description": "Get a job parameter", "parameters": [{"name": "id", "in": "path", "description": "The job parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-parameter"}}}, "description": ""}}}, "put": {"tags": ["Processing | job parameter services"], "description": "Update a job parameter", "parameters": [{"name": "id", "in": "path", "description": "The job parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-parameter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-parameter"}}}}}, "delete": {"tags": ["Processing | job parameter services"], "description": "Delete a job parameter", "parameters": [{"name": "id", "in": "path", "description": "The job parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-parameter"}}}, "description": ""}}}}, "/api/job/{id}/parameter.json": {"get": {"tags": ["Processing | job parameter services"], "description": "Get all job parameter for a job", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job-parameter"}}}}, "description": ""}}}}, "/api/jobparameter.json": {"post": {"tags": ["Processing | job parameter services"], "description": "Add a new job parameter", "parameters": [{"name": "id", "in": "path", "description": "The job parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-parameter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-parameter"}}}}}, "get": {"tags": ["Processing | job parameter services"], "description": "Get all job parameter", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job-parameter"}}}}, "description": ""}}}}, "/api/job/{id}.json": {"get": {"tags": ["Processing | job services"], "description": "Get a job", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job"}}}}, "description": ""}}}, "put": {"tags": ["Processing | job services"], "description": "Edit a job", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}}}, "delete": {"tags": ["Processing | job services"], "description": "Delete a job", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}, "description": ""}}}}, "/api/job/{jobId}/processing_server/{processingServerId}/execute.json": {"get": {"tags": ["Processing | job services"], "description": "Execute a job with a given processing server", "parameters": [{"name": "jobId", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "processingServerId", "in": "path", "description": "The processing server id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}, "description": ""}}}}, "/api/job/{id}/kill.json": {"get": {"tags": ["Processing | job services"], "description": "Kill a job", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}, "description": ""}}}}, "/api/job/{id}/alldata.json": {"delete": {"tags": ["Processing | job services"], "description": "Delete the full data set build by the job. This method will delete: annotation prediction, uploaded files,...", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "query", "description": "(Optional) The task id. This method is heavy, so we use Task service to provide a progress status to the user interface.", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[message:x]"}}}, "get": {"tags": ["Processing | job services"], "description": "List all data build by the job. Job data are prediction (algoannotationterm, algoannotation,...) and uploaded files", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "query", "description": "(Optional) The task id. This method is heavy, so we use Task service to provide a progress status to the user interface.", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[annotations:x,annotationsTerm:x,jobDatas:x,reviewed:x]"}}}}, "/api/project/{id}/job/purge.json": {"get": {"tags": ["Processing | job services"], "description": "For a project, delete all job data if the job has no reviewed annotation", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "query", "description": "(Optional) The task id. This method is heavy, so we use Task service to provide a progress status to the user interface.", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project"}}}}, "/api/job.json": {"post": {"tags": ["Processing | job services"], "description": "Add a new job and create the corresponding user job", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}}}, "get": {"tags": ["Processing | job services"], "description": "Get a list of jobs", "parameters": [{"name": "light", "in": "query", "description": "If true, get a light/quick listing (without job parameters,...)", "required": false, "schema": {"type": "boolean"}}, {"name": "software", "in": "query", "description": "A list of software id to filter", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "project", "in": "query", "description": "A list of project id to filter", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job"}}}}, "description": ""}}}}, "/api/job/{id}/execute.json": {"get": {"tags": ["Processing | job services"], "description": "Execute a job, launch the software", "parameters": [{"name": "id", "in": "path", "description": "The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job"}}}, "description": ""}}}}, "/api/jobtemplateannotation/{id}.json": {"get": {"tags": ["Processing | job template annotation services"], "description": "Get a link between a job and an annotation", "parameters": [{"name": "id", "in": "path", "description": "The link id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template-annotation"}}}, "description": ""}}}, "delete": {"tags": ["Processing | job template annotation services"], "description": "Remove the link beween the job and the annotation", "parameters": [{"name": "id", "in": "path", "description": "The link id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template-annotation"}}}, "description": ""}}}}, "/api/jobtemplateannotation.json": {"post": {"tags": ["Processing | job template annotation services"], "description": "Add a link between a job and an annotation", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template-annotation"}}}}}, "get": {"tags": ["Processing | job template annotation services"], "description": "List all link beetween a job template and an annotation", "parameters": [{"name": "jobtemplate", "in": "query", "description": "(Optional) The job template id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "annotation", "in": "query", "description": "(Optional) The annotation ROI id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job-template-annotation"}}}}, "description": ""}}}}, "/api/jobtemplate/{id}.json": {"get": {"tags": ["Processing | job template services"], "description": "Get a job template", "parameters": [{"name": "id", "in": "path", "description": "The template id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template"}}}, "description": ""}}}, "put": {"tags": ["Processing | job template services"], "description": "Update a job template", "parameters": [{"name": "id", "in": "path", "description": "The template id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template"}}}}}, "delete": {"tags": ["Processing | job template services"], "description": "Delete a job template", "parameters": [{"name": "id", "in": "path", "description": "The template id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template"}}}, "description": ""}}}}, "/api/jobtemplate.json": {"post": {"tags": ["Processing | job template services"], "description": "Add a new job template", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Job-template"}}}}}}, "/api/project/{project}/jobtemplate.json": {"get": {"tags": ["Processing | job template services"], "description": "List template for the specific filter", "parameters": [{"name": "project", "in": "path", "description": "The projecte id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "software", "in": "query", "description": "(Optional) The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Job-template"}}}}, "description": ""}}}}, "/api/roiannotation/{id}.json": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a roi annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ROI-annotation"}}}, "description": ""}}}, "put": {"tags": ["Processing | roi annotation services"], "description": "Update an annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ROI-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ROI-annotation"}}}}}, "delete": {"tags": ["Processing | roi annotation services"], "description": "Delete an annotation", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ROI-annotation"}}}, "description": ""}}}}, "/api/roiannotation/{id}/alphamask.png": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get an alpha mask of a roi annotation (image area framing annotation). Equivalent to crop with 'alphaMask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation/{id}/mask.png": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a binary mask of a roi annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation/{id}/mask.jpg": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a binary mask of a roi annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation/{id}/mask.tiff": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a binary mask of a roi annotation (image area framing annotation). Equivalent to crop with 'mask' type.", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation/{id}/crop.png": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a crop of a roi annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation/{id}/crop.jpg": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a crop of a roi annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation/{id}/crop.tiff": {"get": {"tags": ["Processing | roi annotation services"], "description": "Get a crop of a roi annotation (image area framing annotation)", "parameters": [{"name": "id", "in": "path", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "Type of crop. Allowed values are 'crop' (default behavior if not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary mask), 'alphaMask (part of crop outside annotation is transparent, requires png format)", "required": false, "schema": {"type": "string"}}, {"name": "draw", "in": "query", "description": "Equivalent to set type='draw'", "required": false, "schema": {"type": "boolean"}}, {"name": "mask", "in": "query", "description": "Equivalent to set type='mask'", "required": false, "schema": {"type": "boolean"}}, {"name": "alphaMask", "in": "query", "description": "Equivalent to set type='alphaMask'", "required": false, "schema": {"type": "boolean"}}, {"name": "maxSize", "in": "query", "description": "Maximum crop size in width and height", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "zoom", "in": "query", "description": "Zoom level in which crop is extracted. Ignored if maxSize is set.", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "increaseArea", "in": "query", "description": "Increase crop area by multiplying original crop size by this factor.", "required": false, "schema": {"type": "number"}}, {"name": "complete", "in": "query", "description": "Do not simplify the annotation shape.", "required": false, "schema": {"type": "boolean"}}, {"name": "colormap", "in": "query", "description": "The absolute path of a colormap file", "required": false, "schema": {"type": "string"}}, {"name": "inverse", "in": "query", "description": "True if colors have to be inversed", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "contrast", "in": "query", "description": "Multiply pixels by contrast", "required": false, "schema": {"type": "number"}}, {"name": "gamma", "in": "query", "description": "Apply gamma correction", "required": false, "schema": {"type": "number"}}, {"name": "bits", "in": "query", "description": "Output bit depth per channel", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image (bytes)"}}}}, "/api/roiannotation.json": {"post": {"tags": ["Processing | roi annotation services"], "description": "Add an annotation created by user", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ROI-annotation"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ROI-annotation"}}}}}}, "/api/softwareparameter/{id}.json": {"get": {"tags": ["Processing | software parameter services"], "description": "Get a software parameter info", "parameters": [{"name": "id", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-parameter"}}}, "description": ""}}}, "put": {"tags": ["Processing | software parameter services"], "description": "Update a software parameter", "parameters": [{"name": "id", "in": "path", "description": "The software parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-parameter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-parameter"}}}}}, "delete": {"tags": ["Processing | software parameter services"], "description": "Delete a software parameter", "parameters": [{"name": "id", "in": "path", "description": "The software parameter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-parameter"}}}, "description": ""}}}}, "/api/software/{id}/parameter.json": {"get": {"tags": ["Processing | software parameter services"], "description": "Get all software parameters for a software", "parameters": [{"name": "id", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "withSetByServer", "in": "query", "description": "(Optional) Include params set by server", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-parameter"}}}}, "description": ""}}}}, "/api/softwareparameter.json": {"post": {"tags": ["Processing | software parameter services"], "description": "Add a new software parameter", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-parameter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-parameter"}}}}}, "get": {"tags": ["Processing | software parameter services"], "description": "Get all software parameter", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-parameter"}}}}, "description": ""}}}}, "/api/softwareproject/{id}.json": {"get": {"tags": ["Processing | software project services"], "description": "Get a software project link", "parameters": [{"name": "id", "in": "path", "description": "The software project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-project"}}}, "description": ""}}}, "delete": {"tags": ["Processing | software project services"], "description": "Remove the software from the project", "parameters": [{"name": "id", "in": "path", "description": "The software project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-project"}}}, "description": ""}}}}, "/api/project/{id}/softwareproject.json": {"get": {"tags": ["Processing | software project services"], "description": "List all software project links by project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-project"}}}}, "description": ""}}}}, "/api/softwareproject.json": {"post": {"tags": ["Processing | software project services"], "description": "Add an existing software to a project", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-project"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-project"}}}}}, "get": {"tags": ["Processing | software project services"], "description": "List all software project links", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-project"}}}}, "description": ""}}}}, "/api/software/{id}.json": {"get": {"tags": ["Processing | software services"], "description": "Get a specific software", "parameters": [{"name": "id", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software"}}}, "description": ""}}}, "put": {"tags": ["Processing | software services"], "description": "Update a software.", "parameters": [{"name": "id", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software"}}}}}, "delete": {"tags": ["Processing | software services"], "description": "Delete a software.", "parameters": [{"name": "id", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}, "description": ""}}}}, "/api/software_user_repository/{id}/software.json": {"get": {"tags": ["Processing | software services"], "description": "Get all the software for a software use repository", "parameters": [{"name": "id", "in": "path", "description": "The software user repository id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}, "description": ""}}}}, "/api/project/{idProject}/software/{idSoftware}/stats.json": {"get": {"tags": ["Processing | software services"], "description": "For a software and a project, get the stats (number of job, succes,...)", "parameters": [{"name": "idProject", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idSoftware", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[numberOfJob:x,numberOfNotLaunch:x,numberOfInQueue:x,numberOfRunning:x,numberOfSuccess:x,numberOfFailed:x,numberOfIndeterminate:x,numberOfWait:x]"}}}}, "/api/project/{id}/software.json": {"get": {"tags": ["Processing | software services"], "description": "Get all software available in a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}, "description": ""}}}}, "/api/software.json": {"post": {"tags": ["Processing | software services"], "description": "Add a new software to cytomine. We must add in other request: software parameters, software project link,...", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software"}}}}}, "get": {"tags": ["Processing | software services"], "description": "Get all software available in cytomine", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software"}}}}, "description": ""}}}}, "/api/discipline/{id}.json": {"get": {"tags": ["Project | discipline services"], "description": "Get a discipline", "parameters": [{"name": "id", "in": "path", "description": "The discipline id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Discipline"}}}, "description": ""}}}, "put": {"tags": ["Project | discipline services"], "description": "Update a discipline", "parameters": [{"name": "id", "in": "path", "description": "", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Discipline"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Discipline"}}}}}, "delete": {"tags": ["Project | discipline services"], "description": "Delete a discipline", "parameters": [{"name": "id", "in": "path", "description": "", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Discipline"}}}, "description": ""}}}}, "/api/discipline.json": {"post": {"tags": ["Project | discipline services"], "description": "Add a new discipline", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Discipline"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Discipline"}}}}}, "get": {"tags": ["Project | discipline services"], "description": "Get discipline listing, according to your access", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Discipline"}}}}, "description": ""}}}}, "/api/project/{idProject}/defaultlayer/{id}.json": {"get": {"tags": ["Project | project default layer services"], "description": "Get a default layer", "parameters": [{"name": "id", "in": "path", "description": "The default layer id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-default-layer"}}}, "description": ""}}}, "put": {"tags": ["Project | project default layer services"], "description": "Update a default layer", "parameters": [{"name": "id", "in": "path", "description": "The default layer id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-default-layer"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-default-layer"}}}}}, "delete": {"tags": ["Project | project default layer services"], "description": "Delete an default layer", "parameters": [{"name": "id", "in": "path", "description": "The default layer id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "query", "description": "(Optional, default:null) The id of the task to update during process", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-default-layer"}}}, "description": ""}}}}, "/api/project/{idProject}/defaultlayer.json": {"get": {"tags": ["Project | project default layer services"], "description": "List all default layers of a project", "parameters": [{"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project-default-layer"}}}}, "description": ""}}}, "post": {"tags": ["Project | project default layer services"], "description": "Add a default layer", "parameters": [{"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-default-layer"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-default-layer"}}}}}}, "/api/project/{id}.json": {"get": {"tags": ["Project | project services"], "description": "Get a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}, "description": ""}}}, "put": {"tags": ["Project | project services"], "description": "Update a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}, "delete": {"tags": ["Project | project services"], "description": "Delete a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}, "description": ""}}}}, "/api/project/method/lastopened.json": {"get": {"tags": ["Project | project services"], "description": "Get the last opened projects for the current user", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "description": ""}}}}, "/api/commandhistory.json": {"get": {"tags": ["Project | project services"], "description": "Get the last action for a user in a project or in all projects available for the current user", "parameters": [{"name": "id", "in": "path", "description": "The project id (if null: all projects)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Will return actions created after this date. (Optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Will return actions created before this date. (Optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "fullData", "in": "query", "description": "Flag to include the full JSON of the data field on each command history. Not recommended for long listing.", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "commandHistory"}}}}, "/api/project/{id}/invitation.json": {"post": {"tags": ["Project | project services"], "description": "Invite a not yer existing user to the project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "json", "in": "query", "description": "The user name and email of the invited user", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}}, "/api/retrieval/{id}/project.json": {"get": {"tags": ["Project | project services"], "description": "List all retrieval-project for a specific project. The suggested term can use data from other project (with same ontology).", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "description": ""}}}}, "/api/user/{id}/project/light.json": {"get": {"tags": ["Project | project services"], "description": "Get projects available for the current user and available for a specific user in a specific role (user, admin, creator). ", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "creator", "in": "query", "description": "filter by creator", "required": true, "schema": {"type": "boolean"}}, {"name": "admin", "in": "query", "description": "filter by admin", "required": true, "schema": {"type": "boolean"}}, {"name": "user", "in": "query", "description": "filter by user", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project (light)"}}}}, "/api/user/{id}/project.json": {"get": {"tags": ["Project | project services"], "description": "Get projects available for the current user and available for a specific user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "description": ""}}}}, "/api/software/{id}/project.json": {"get": {"tags": ["Project | project services"], "description": "Get projects available for the current user that can use a specific software", "parameters": [{"name": "id", "in": "path", "description": "The software id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "description": ""}}}}, "/api/ontology/{id}/project.json": {"get": {"tags": ["Project | project services"], "description": "Get projects available for the current user that can use a specific ontology", "parameters": [{"name": "id", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "description": ""}}}}, "/api/project/{id}/last/{max}.json": {"get": {"tags": ["Project | project services"], "description": "Get the last action for a project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "path", "description": "The maximum number of actions to return", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "command history"}}}}, "/rest project/countByUser.json": {"get": {"tags": ["Project | project services"], "description": "Count the number of project visits", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[total:x]"}}}}, "/api/project.json": {"post": {"tags": ["Project | project services"], "description": "Add a new project", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}}, "get": {"tags": ["Project | project services"], "description": "Get project listing, according to your access", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project"}}}}, "description": ""}}}}, "/api/project/{idProject}/representative/{id}.json": {"get": {"tags": ["Project | representative user services"], "description": "Get a project_representative_user", "parameters": [{"name": "id", "in": "path", "description": "The project_representative_user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-representative-user"}}}, "description": ""}}}, "delete": {"tags": ["Project | representative user services"], "description": "Delete a project_representative_user", "parameters": [{"name": "id", "in": "path", "description": "The project_representative_user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idProject", "in": "path", "description": "The project id relative to the representative", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "query", "description": "An user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "query", "description": "(Optional, default:null) The id of the task to update during process", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-representative-user"}}}, "description": ""}}}}, "/api/project/{idProject}/representative.json": {"get": {"tags": ["Project | representative user services"], "description": "List all representative user of a project", "parameters": [{"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Project-representative-user"}}}}, "description": ""}}}, "post": {"tags": ["Project | representative user services"], "description": "Add a project_representative_user", "parameters": [{"name": "idProject", "in": "path", "description": "The id of project", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-representative-user"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project-representative-user"}}}}}}, "/api/searchenginefilter/{id}.json": {"get": {"tags": ["Search | search engine filter services"], "description": "Get a filter", "parameters": [{"name": "id", "in": "path", "description": "The filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Search-engine-filter"}}}, "description": ""}}}, "delete": {"tags": ["Search | search engine filter services"], "description": "Delete an filter", "parameters": [{"name": "id", "in": "path", "description": "The filter id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "task", "in": "path", "description": "(Optional, default:null) The id of the task to update during process", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Search-engine-filter"}}}, "description": ""}}}}, "/api/searchenginefilter.json": {"post": {"tags": ["Search | search engine filter services"], "description": "Add an filter", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Search-engine-filter"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Search-engine-filter"}}}}}, "get": {"tags": ["Search | search engine filter services"], "description": "List all filters", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Search-engine-filter"}}}}, "description": ""}}}}, "/api/image/{className}/{id}.json": {"get": {"tags": ["Search | search engine services"], "description": "Get a preview image for a domain. For image = thumb, for annotation = crop, for project = the last image...", "parameters": [{"name": "id", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "className", "in": "path", "description": "The domain class name", "required": true, "schema": {"type": "string"}}, {"name": "maxSize", "in": "query", "description": "(Optional) Max size of the image (default: 256)", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/search_engine_step2"}}}}, "description": ""}}}}, "/api/search-result.json": {"get": {"tags": ["Search | search engine services"], "description": "Search for words and filters in Cytomine resources. This provides more data for a subset of results", "parameters": [{"name": "ids", "in": "query", "description": "Search only on these domain ids", "required": true, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "expr", "in": "query", "description": "List of words to search (AND search). Max 5 words and each words must have at least 3 characters.", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "projects", "in": "query", "description": "(Optional) Search only on domain from these projects", "required": true, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "domain", "in": "query", "description": "(Optional) Search only a king of domain groups (only project, only image,...)", "required": true, "schema": {"type": "string"}}, {"name": "types", "in": "query", "description": "(Optional) Search only on some attributes (only on domain itself, only on properties,...)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/search_engine_step2"}}}}, "description": ""}}}}, "/api/search-engine.json": {"get": {"tags": ["Search | search engine services"], "description": "Search for words and filters in Cytomine resources. This only retrieve id/class of matching domains.", "parameters": [{"name": "expr", "in": "query", "description": "List of words to search (AND search). Max 5 words and each words must have at least 3 characters.", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "projects", "in": "query", "description": "(Optional) Search only on domain from these projects", "required": true, "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}, {"name": "domain", "in": "query", "description": "(Optional) Search only a king of domain groups (only project, only image,...)", "required": true, "schema": {"type": "string"}}, {"name": "types", "in": "query", "description": "(Optional) Search only on some attributes (only on domain itself, only on properties,...)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/search_engine_step1"}}}}, "description": ""}}}}, "/search/list.json": {"get": {"tags": ["Search | search services"], "description": "Search for domain with a keywords list. The search will into properties value and description domain.", "parameters": [{"name": "keywords", "in": "query", "description": "(Optional) List of keywords. If null, take all domain.", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "operator", "in": "query", "description": "(Optional) Operator between keyword (OR or AND). If null, take OR.", "required": true, "schema": {"type": "string"}}, {"name": "filter", "in": "query", "description": "(Optional) Domain type (PROJECT, IMAGE, ANNOTATION or ALL). If null, get all domain type", "required": true, "schema": {"type": "string"}}, {"name": "projects", "in": "query", "description": "(Optional) Look only on domain from the project list id. If null, look into all project (available for the current user)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/search"}}}, "description": ""}}}}, "/api/domain/{domainClassName}/{domainIdent}/user/{user}.json": {"post": {"tags": ["Security | acl services"], "description": "Add a new permission for a user on a domain", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}, {"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "auth", "in": "query", "description": "(Optional, default READ) The permission (READ, WRITE, DELETE or PERMISSION)", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "List of all permission name (empty if user has no permission)"}}}, "delete": {"tags": ["Security | acl services"], "description": "Delete a permission for a user on a domain", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}, {"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "auth", "in": "path", "description": "(Optional, default READ)  The permission (READ, WRITE, DELETE or PERMISSION)", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "Delete a permission"}}}, "get": {"tags": ["Security | acl services"], "description": "Get all ACL for a user and a class.", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}, {"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "List of all permission name (empty if user has no permission)"}}}}, "/api/group/{id}.json": {"get": {"tags": ["Security | group services"], "description": "Get a group", "parameters": [{"name": "id", "in": "path", "description": "The group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}}, "put": {"tags": ["Security | group services"], "description": "Edit a group", "parameters": [{"name": "id", "in": "path", "description": "The group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}}, "delete": {"tags": ["Security | group services"], "description": "Delete a group", "parameters": [{"name": "id", "in": "path", "description": "The group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}}}, "/api/ldap/group.json": {"post": {"tags": ["Security | group services"], "description": "Create a group from the LDAP", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}}}, "/api/ldap/{id}/group.json": {"get": {"tags": ["Security | group services"], "description": "Check if a group is in the LDAP", "parameters": [{"name": "id", "in": "path", "description": "The group id ", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}}, "put": {"tags": ["Security | group services"], "description": "Reset a group with the informations in the LDAP", "parameters": [{"name": "id", "in": "path", "description": "The group id ", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}}}, "/api/group.json": {"post": {"tags": ["Security | group services"], "description": "Add a new group", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Group"}}}}}, "get": {"tags": ["Security | group services"], "description": "List all group", "parameters": [{"name": "withUser", "in": "query", "description": "(Optional) If set, each group will have the array of its users.", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Group"}}}}, "description": ""}}}}, "/api/role/{id}.json": {"get": {"tags": ["Security | sec role services"], "description": "Get a role", "parameters": [{"name": "id", "in": "path", "description": "The role id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-role"}}}, "description": ""}}}}, "/api/role.json": {"get": {"tags": ["Security | sec role services"], "description": "List all roles available on cytomine", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Sec-role"}}}}, "description": ""}}}}, "/api/user/{user}/role/{role}.json": {"get": {"tags": ["Security | sec user sec role services"], "description": "Get a user role", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "string"}}, {"name": "role", "in": "path", "description": "The role id", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}, "description": ""}}}, "delete": {"tags": ["Security | sec user sec role services"], "description": "Delete a user role", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "string"}}, {"name": "role", "in": "path", "description": "The role id", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}, "description": ""}}}}, "/api/user/{user}/role/{role}/define.json": {"put": {"tags": ["Security | sec user sec role services"], "description": "Define a role for a user. If admin is defined, user will have admin,user,guest. If user is defined, user will have user,guest, etc. Role may be create or remove", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "string"}}, {"name": "role", "in": "path", "description": "The role id", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}}}}, "/api/user/{user}/role.json": {"post": {"tags": ["Security | sec user sec role services"], "description": "Get a user role", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "string"}}, {"name": "role", "in": "path", "description": "The role id", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}}}, "get": {"tags": ["Security | sec user sec role services"], "description": "List all roles for a user", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Sec-user-sec-role"}}}}, "description": ""}}}}, "/api/user/{user}/group/{group}.json": {"get": {"tags": ["Security | user group services"], "description": "Get a user-group relation", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "group", "in": "path", "description": "The group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-group"}}}, "description": ""}}}, "delete": {"tags": ["Security | user group services"], "description": "Remove a user from a group", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "group", "in": "path", "description": "The group id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-group"}}}, "description": ""}}}}, "/api/user/{user}/group.json": {"post": {"tags": ["Security | user group services"], "description": "Get a user-group relation", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-group"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-group"}}}}}, "get": {"tags": ["Security | user group services"], "description": "List all user group for a user", "parameters": [{"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User-group"}}}}, "description": ""}}}}, "/api/userJob/{id}.json": {"get": {"tags": ["Security | user job services"], "description": "Get a user job", "parameters": [{"name": "id", "in": "path", "description": "The user job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User-job"}}}}, "description": ""}}}, "put": {"tags": ["Security | user job services"], "description": "Edit a user job", "parameters": [{"name": "id", "in": "path", "description": "The userjob id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-job"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User-job"}}}}}}, "/api/userJob.json": {"post": {"tags": ["Security | user job services"], "description": "Create a new user job for algo. If job param is null, a job will be create.", "parameters": [{"name": "JSON POST DATA: parent", "in": "path", "description": "The user id executing the software", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "JSON POST DATA: job", "in": "path", "description": "(Optional, if null, software/project params must be set)The job id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "JSON POST DATA: software", "in": "path", "description": "(Optional, if null job param must be set)The software of the job", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "JSON POST DATA: project", "in": "path", "description": "(Optional, if null job param must be set) The project of the job", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "[userJob: x]"}}}}, "/api/project/{id}/userjob.json": {"get": {"tags": ["Security | user job services"], "description": "List user job for a project (in list or tree format)", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "tree", "in": "query", "description": "(Optional) Get a tree structure", "required": true, "schema": {"type": "boolean"}}, {"name": "image", "in": "query", "description": "(Optional) Only get job having data on this image", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[userJob: x]"}}}}, "/api/user/{id}.json": {"get": {"tags": ["Security | user services"], "description": "Get a user", "parameters": [{"name": "id", "in": "path", "description": "The user id or the user username", "required": true, "schema": {"type": "object"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}}, "put": {"tags": ["Security | user services"], "description": "Edit a user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "delete": {"tags": ["Security | user services"], "description": "Delete a user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}}}, "/api/project/{id}/admin.json": {"get": {"tags": ["Security | user services"], "description": "Get all project managers", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/project/{id}/users/representative.json": {"get": {"tags": ["Security | user services"], "description": "Get all project representatives", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/project/{id}/creator.json": {"get": {"tags": ["Security | user services"], "description": "Get project creator (Only 1 even if response is list)", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/rest user/show/{id}.json": {"get": {"tags": ["Security | user services"], "description": "Get ontology creator (Only 1 even if response is list)", "parameters": [{"name": "id", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/ontology/{id}/user.json": {"get": {"tags": ["Security | user services"], "description": "Get all ontology users. Online flag may be set to get only online users", "parameters": [{"name": "id", "in": "path", "description": "The ontology id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/project/{id}/userlayer.json": {"get": {"tags": ["Security | user services"], "description": "Get all user layers available for a project. If image param is set, add user job layers. The result depends on the current user and the project flag (hideUsersLayers,...).", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "image", "in": "path", "description": "(Optional) The image id, if set add userjob layers", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/storage/{id}/user.json": {"get": {"tags": ["Security | user services"], "description": "Get all storage users.", "parameters": [{"name": "id", "in": "path", "description": "The storage id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/user/current.json": {"get": {"tags": ["Security | user services"], "description": "Get current user info", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}}}, "/api/project/{project}/user.json": {"get": {"tags": ["Security | user services"], "description": "Get all project users. Online flag may be set to get only online users", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "online", "in": "query", "description": "(Optional, default false) Get only online users for this project", "required": true, "schema": {"type": "boolean"}}, {"name": "showJob", "in": "query", "description": "(Optional, default false) Also show the users job for this project", "required": true, "schema": {"type": "boolean"}}, {"name": "withLastImage", "in": "query", "description": "(Optional, default false) Show the last image seen by each user in this project", "required": true, "schema": {"type": "boolean"}}, {"name": "withLastConsultation", "in": "query", "description": "(Optional, default false) Show the last consultation of this project by each user", "required": true, "schema": {"type": "boolean"}}, {"name": "withNumberConsultations", "in": "query", "description": "(Optional, default false) Show the number of consultations of this project by each user", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}, "post": {"tags": ["Security | user services"], "description": "Add users in a project as simple 'user'", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "users", "in": "query", "description": "The users ids", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}, "delete": {"tags": ["Security | user services"], "description": "Delete users from a project (also delete the manager role if the user was one)", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "users", "in": "query", "description": "The users ids", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "empty"}}}}, "/api/project/{id}/user/{idUser}.json": {"post": {"tags": ["Security | user services"], "description": "Add user in a project as simple 'user'", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}, "delete": {"tags": ["Security | user services"], "description": "Delete user from a project as simple 'user'", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "empty"}}}}, "/api/project/{id}/user/{idUser}/admin.json": {"post": {"tags": ["Security | user services"], "description": "Add user in project manager list", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}, "delete": {"tags": ["Security | user services"], "description": "Delete user from project manager list", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "empty"}}}}, "/api/storage/{id}/user/{idUser}.json": {"post": {"tags": ["Security | user services"], "description": "Add user in a storage", "parameters": [{"name": "id", "in": "path", "description": "The storage id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "empty"}}}, "delete": {"tags": ["Security | user services"], "description": "Delete user from a storage", "parameters": [{"name": "id", "in": "path", "description": "The storage id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "idUser", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "empty"}}}}, "/api/user/{id}/password.json": {"put": {"tags": ["Security | user services"], "description": "Change a user password for a user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "password", "in": "query", "description": "The new password", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "/api/user/security_check.json": {"post": {"tags": ["Security | user services"], "description": "Check a user password for the current user", "parameters": [{"name": "password", "in": "query", "description": "The password", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "/api/user/{id}/friends.json": {"get": {"tags": ["Security | user services"], "description": "Get all user friend (other user that share same project) for a specific user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "project", "in": "query", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "offline", "in": "query", "description": "(Optional, default false) Get online and offline user", "required": true, "schema": {"type": "boolean"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/project/{id}/online/user.json": {"get": {"tags": ["Security | user services"], "description": "List people connected now to the same project and get their openned pictures", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "List of [id: %idUser%,image: %idImage%, filename: %Image path%, originalFilename:%Image filename%, date: %Last position date%]"}}}}, "/api/project/{id}/usersActivity.json": {"get": {"tags": ["Security | user services"], "description": "List all the users of a project with their last activity (opened project & image)", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/ldap/user.json": {"post": {"tags": ["Security | user services"], "description": "Add an user from the LDAP", "parameters": [{"name": "username", "in": "query", "description": "The username in LDAP", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}}, "/api/ldap/{username}/user.json": {"get": {"tags": ["Security | user services"], "description": "Check if an user is in the LDAP", "parameters": [{"name": "username", "in": "path", "description": "The username in LDAP", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/project/{id}/user/download": {"get": {"tags": ["Security | user services"], "description": "Download a report (pdf, xls,...) with user listing from a specific project", "parameters": [{"name": "id", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "terms", "in": "query", "description": "The annotation terms id (if empty: all terms)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "users", "in": "query", "description": "The annotation users id (if empty: all users)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "images", "in": "query", "description": "The annotation images id (if empty: all images)", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "format", "in": "query", "description": "The report format (pdf, xls,...)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/project/{project}/resumeActivity/{user}.json": {"get": {"tags": ["Security | user services"], "description": "Return a resume of the activities of a user into a project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}}}, "/api/signature.json": {"get": {"tags": ["Security | user services"], "description": "Build a signature string based on params for the current user.", "parameters": [{"name": "method", "in": "query", "description": "The request method action", "required": true, "schema": {"type": "string"}}, {"name": "content-MD5", "in": "query", "description": "(Optional) The request MD5", "required": true, "schema": {"type": "string"}}, {"name": "content-type", "in": "query", "description": "(Optional) The request content type", "required": true, "schema": {"type": "string"}}, {"name": "date", "in": "query", "description": "(Optional) The request date", "required": true, "schema": {"type": "string"}}, {"name": "queryString", "in": "query", "description": "(Optional) The request query string", "required": true, "schema": {"type": "string"}}, {"name": "forwardURI", "in": "query", "description": "(Optional) The request forward URI", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[signature:x, publicKey:x]"}}}}, "/api/user.json": {"post": {"tags": ["Security | user services"], "description": "Add a user, by default the sec role 'USER' is set", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "get": {"tags": ["Security | user services"], "description": "Render and returns all Users", "parameters": [{"name": "publicKey", "in": "query", "description": "(Optional) If set, get only user with the public key in param", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}}}, "description": ""}}}}, "/api/user/{id}/lock.json": {"post": {"tags": ["Security | user services"], "description": "Lock an user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "delete": {"tags": ["Security | user services"], "description": "Unlock an user", "parameters": [{"name": "id", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "description": ""}}}}, "/api/userkey/{publicKey}/keys.json": {"get": {"tags": ["Security | user services"], "description": "Get the public and private key for a user. Request only available for Admin or if user is the current user", "parameters": [{"name": "id", "in": "path", "description": "(Optional) The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "publicKey", "in": "path", "description": "(Optional) The user key", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "[publicKey:x, privateKey:x]"}}}}, "/api/project/{project}/annotationaction/count.json": {"get": {"tags": ["Social | annotation action services"], "description": "Get the number of annotation actions in the specified project", "parameters": [{"name": "project", "in": "path", "description": "The identifier of the project", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only actions after this date will be counted (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only actions before this date will be counted (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "type", "in": "query", "description": "(Optional) If specified, only annotation action of this type will be taken into account", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-action"}}}, "description": ""}}}}, "/api/annotationaction.json": {"post": {"tags": ["Social | annotation action services"], "description": "Record an action performed by a user on an annotation.", "parameters": [{"name": "annotationIdent", "in": "query", "description": "The annotation id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "action", "in": "query", "description": "The action", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-action"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-action"}}}}}}, "/api/imageinstance/{image}/annotationactions.json": {"get": {"tags": ["Social | annotation action services"], "description": "Summarize the annotation actions entries.", "parameters": [{"name": "image", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "The user id", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterThan", "in": "query", "description": "A date. Will select all the entries created after this date", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "A date. Will select all the entries created before this date", "required": false, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Annotation-action"}}}, "description": ""}}}}, "/api/project/{project}/imageconsultation/count.json": {"get": {"tags": ["Social | image consultation services"], "description": "Get the number of image consultations in the specified project", "parameters": [{"name": "project", "in": "path", "description": "The identifier of the project", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only image consultations after this date will be counted (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only image consultations before this date will be counted (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image consultation"}}}}, "/api/project/{project}/lastImages.json": {"get": {"tags": ["Social | image consultation services"], "description": "List the last consulted image by each user for a given project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image consultation"}}}}, "/api/project/{project}/user/{user}/imageconsultation.json": {"get": {"tags": ["Social | image consultation services"], "description": "Get the last consultations of an user into a project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image consultation"}}}}, "/api/imageconsultation/resume.json": {"get": {"tags": ["Social | image consultation services"], "description": "Summarize the consulted images for a given user and a given project", "parameters": [{"name": "user", "in": "query", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "project", "in": "query", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "export", "in": "query", "description": "The export format (supported: csv). Otherwise, return a json", "required": false, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "image consultation"}}}}, "/api/imageinstance/{id}/consultation.json": {"post": {"tags": ["Social | image consultation services"], "description": "Add a new image consultation record", "parameters": [{"name": "id", "in": "path", "description": "The image instance id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "image consultation"}}}}, "/api/project/{project}/userconnection/count.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the number of connections to all projects", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterThan", "in": "query", "description": "The date when counting starts", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "period", "in": "query", "description": "The period of connections (hour : by hours, day : by days, week : by weeks)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/lastConnection.json": {"get": {"tags": ["Social | project connection services"], "description": "List the last user connections in a project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/lastConnection/{user}.json": {"get": {"tags": ["Social | project connection services"], "description": "List the last user connections in a project for a given user", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/userconnection/{user}.json": {"get": {"tags": ["Social | project connection services"], "description": "Get user connections in a project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/connectionFrequency.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the number of connection by project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterThan", "in": "query", "description": "The date when counting starts", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "period", "in": "query", "description": "The period of counting", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/connectionFrequency/{user}.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the number of connection by project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterThan", "in": "query", "description": "The date when counting starts", "required": true, "schema": {"type": "string", "format": "date"}}, {"name": "period", "in": "query", "description": "The period of connections (hour : by hours, day : by days, week : by weeks)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/connectionFrequency.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the number of connections in the specified project", "parameters": [{"name": "project", "in": "path", "description": "The identifier of the project", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "startDate", "in": "query", "description": "Only connections after this date will be counted (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "endDate", "in": "query", "description": "Only connections before this date will be counted (optional)", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/averageConnections.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the average project connections on Cytomine.", "parameters": [{"name": "afterThan", "in": "query", "description": "Average on the project connection where created > the afterThan parameter. Optional, the beforeThan Date -1 year will be considered if none is given.", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "Average on the project connection where created < the beforeThan parameter. Optional, the current Date will be considered if none is given.", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "period", "in": "query", "description": "The period of connections (hour : by hours, day : by days, week : by weeks) (Mandatory)", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/connectionHistory/{user}.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the project connections of one user into a project.", "parameters": [{"name": "user", "in": "path", "description": "The user id. Mandatory", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "project", "in": "path", "description": "The project id. Mandatory", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "offset", "in": "query", "description": "An offset. Default value = 0", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "limit", "in": "query", "description": "Limit the project connections. Optionnal", "required": true, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/projectConnection/{id}.json": {"get": {"tags": ["Social | project connection services"], "description": "Get the details of a project connection including the actions done during a project connection of one user into a project.", "parameters": [{"name": "project", "in": "path", "description": "The project id. Mandatory", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "id", "in": "path", "description": "The project connection id. Mandatory", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "project connection"}}}}, "/api/project/{project}/userconnection.json": {"post": {"tags": ["Social | project connection services"], "description": "Add a new user connection record to a project", "parameters": [{"name": "project", "in": "path", "description": "The project id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "project connection"}}}}, "/api/imageinstance/{id}/position/{user}.json": {"get": {"tags": ["Social| user position services"], "description": "Get the last position for a user and an image.", "parameters": [{"name": "id", "in": "path", "description": "The image id (Mandatory)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "path", "description": "The user id (Mandatory)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "broadcast", "in": "path", "description": "If set to true, the last position broadcasted by the user will be returned", "required": true, "schema": {"type": "boolean"}}, {"name": "slice", "in": "query", "description": "The slice id", "required": false, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "user position"}}}}, "/api/imageinstance/{id}/online.json": {"get": {"tags": ["Social| user position services"], "description": "Get users that have opened an image recently.", "parameters": [{"name": "id", "in": "path", "description": "The image id (Mandatory)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "slice", "in": "query", "description": "The slice id", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "broadcast", "in": "query", "description": "If set to true, only users broadcasting their position will be returned", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "user position"}}}}, "/api/sliceinstance/{slice}/position.json": {"post": {"tags": ["Social| user position services"], "description": "Record the position of the current user on an image.", "parameters": [{"name": "image", "in": "path", "description": "The image id (Mandatory if slice not used)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "slice", "in": "path", "description": "The slice id (Mandatory if image not used)", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "topLeftX", "in": "query", "description": "Top Left X coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "topRightX", "in": "query", "description": "Top Right X coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "bottomLeftX", "in": "query", "description": "Bottom Left X coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "bottomRightX", "in": "query", "description": "Bottom Right X coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "topLeftY", "in": "query", "description": "Top Left Y coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "topRightY", "in": "query", "description": "Top Right Y coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "bottomLeftY", "in": "query", "description": "Bottom Left Y coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "bottomRightY", "in": "query", "description": "Bottom Right Y coordinate of the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "zoom", "in": "query", "description": "Zoom level in the user viewport", "required": true, "schema": {"type": "integer", "format": "int32"}}, {"name": "rotation", "in": "query", "description": "Rotation level in the user viewport", "required": true, "schema": {"type": "number"}}, {"name": "broadcast", "in": "query", "description": "Whether or not the user is broadcasting his/her position", "required": true, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"description": "user position"}}}}, "/api/imageinstance/{image}/positions.json": {"get": {"tags": ["Social| user position services"], "description": "Summarize the UserPosition entries.", "parameters": [{"name": "image", "in": "path", "description": "The image id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "slice", "in": "query", "description": "The slice id", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "user", "in": "query", "description": "The user id", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "afterThan", "in": "query", "description": "A date. Will select all the entries created after this date.", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "beforeThan", "in": "query", "description": "A date. Will select all the entries created before this date.", "required": false, "schema": {"type": "integer", "format": "int64"}}, {"name": "showDetails", "in": "query", "description": "Optional. If true, will give the complete list", "required": false, "schema": {"type": "boolean"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "user position"}}}}, "/api/software_user_repository/{id}.json": {"get": {"tags": ["Software user repositories services"], "description": "Get a specific software user repository.", "parameters": [{"name": "id", "in": "path", "description": "The software repository id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-user-repository"}}}, "description": ""}}}, "put": {"tags": ["Software user repositories services"], "description": "Update a software user repository.", "parameters": [{"name": "id", "in": "path", "description": "The software user repository id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-user-repository"}}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-user-repository"}}}}}, "delete": {"tags": ["Software user repositories services"], "description": "Delete a software user repository.", "parameters": [{"name": "id", "in": "path", "description": "The software user repository id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-user-repository"}}}}, "description": ""}}}}, "/api/software_user_repository/{id}/refresh.json": {"get": {"tags": ["Software user repositories services"], "description": "Refresh the given software user repository", "parameters": [{"name": "id", "in": "path", "description": "The software user repository id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-user-repository"}}}, "description": ""}}}}, "/api/software_user_repository/refresh_user_repositories.json": {"get": {"tags": ["Software user repositories services"], "description": "Refresh the software user repositories loaded by the software-router", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-user-repository"}}}, "description": ""}}}}, "/api/software_user_repository.json": {"post": {"tags": ["Software user repositories services"], "description": "Add a new software user repository.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-user-repository"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Software-user-repository"}}}}}, "get": {"tags": ["Software user repositories services"], "description": "Get all the software user repositories.", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Software-user-repository"}}}}, "description": ""}}}}, "/api/attachedfile/{id}.json": {"get": {"tags": ["Utils | attached services"], "description": "Get a specific attached file", "parameters": [{"name": "id", "in": "path", "description": "The attached file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Attached-file"}}}, "description": ""}}}, "delete": {"tags": ["Utils | attached services"], "description": "Delete an attached file", "parameters": [{"name": "id", "in": "path", "description": "The attached file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Attached-file"}}}, "description": ""}}}}, "/api/attachedfile/{id}/download": {"get": {"tags": ["Utils | attached services"], "description": "Download a file for a given attached file", "parameters": [{"name": "id", "in": "path", "description": "The attached file id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"description": "file"}}}}, "/api/attachedfile.json": {"put": {"tags": ["Utils | attached services"], "description": "Upload a file for a domain", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Attached-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Attached-file"}}}}}, "get": {"tags": ["Utils | attached services"], "description": "List all attached file available", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Attached-file"}}}}, "description": ""}}}}, "/api/attachedfileRTEditor.json": {"post": {"tags": ["Utils | attached services"], "description": "Upload a file for a domain. Decode params filled by RTEditor", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Attached-file"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Attached-file"}}}}}}, "/api/domain/{domainClassName}/{domainIdent}/attachedfile.json": {"get": {"tags": ["Utils | attached services"], "description": "List all attached file for a given domain", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Attached-file"}}}}, "description": ""}}}}, "/api/domain/{domainClassName}/{domainIdent}/description.json": {"get": {"tags": ["Utils | description services"], "description": "Get a description for a specific domain (id and class)", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Description"}}}, "description": ""}}}, "post": {"tags": ["Utils | description services"], "description": "Add a new description to a domain", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class name", "required": true, "schema": {"type": "string"}}, {"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Description"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Description"}}}}}, "put": {"tags": ["Utils | description services"], "description": "Update a description", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Description"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Description"}}}}}, "delete": {"tags": ["Utils | description services"], "description": "Delete a description", "parameters": [{"name": "domainIdent", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "domainClassName", "in": "path", "description": "The domain class", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Description"}}}, "description": ""}}}}, "/api/description.json": {"get": {"tags": ["Utils | description services"], "description": "List all description available", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Description"}}}}, "description": ""}}}}, "/api/tag_domain_association/{id}.json": {"get": {"tags": ["tag domain association services"], "description": "Get a specific tag-domain association", "parameters": [{"name": "id", "in": "path", "description": "The association id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag-domain-association"}}}, "description": ""}}}, "delete": {"tags": ["tag domain association services"], "description": "Delete a tag-domain association.", "parameters": [{"name": "id", "in": "path", "description": "The tag id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag-domain-association"}}}}, "description": ""}}}}, "/api/domain/{domainClassName}/{domainId}/tag_domain_association.json": {"get": {"tags": ["tag domain association services"], "description": "Get all tag-domain association available in cytomine related to a specific domain", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class name", "required": true, "schema": {"type": "string"}}, {"name": "domainId", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag-domain-association"}}}}, "description": ""}}}, "post": {"tags": ["tag domain association services"], "description": "Add a new tag-domain association to cytomine.", "parameters": [{"name": "domainClassName", "in": "path", "description": "The domain class name", "required": true, "schema": {"type": "string"}}, {"name": "domainId", "in": "path", "description": "The domain id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag-domain-association"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag-domain-association"}}}}}}, "/rest tag domain association/update/{id}.json": {"put": {"tags": ["tag domain association services"], "description": "Update a tag-domain association.", "parameters": [{"name": "id", "in": "path", "description": "The tag id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag-domain-association"}}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag-domain-association"}}}}}}, "/api/tag_domain_association.json": {"get": {"tags": ["tag domain association services"], "description": "Get all tag-domain associations available in cytomine", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag-domain-association"}}}}, "description": ""}}}}, "/api/tag/{id}.json": {"get": {"tags": ["tag services"], "description": "Get a specific tag", "parameters": [{"name": "id", "in": "path", "description": "The tag id", "required": true, "schema": {"type": "integer", "format": "int64"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}}, "put": {"tags": ["tag services"], "description": "Update a tag.", "parameters": [{"name": "id", "in": "path", "description": "The tag id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}}, "delete": {"tags": ["tag services"], "description": "Delete a tag.", "parameters": [{"name": "id", "in": "path", "description": "The tag id", "required": true, "schema": {"type": "integer", "format": "int64"}}, {"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "description": ""}}}}, "/api/tag.json": {"post": {"tags": ["tag services"], "description": "Add a new tag to cytomine.", "parameters": [], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "409": {"description": "Object already exist"}, "200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}, "description": ""}}, "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}}, "get": {"tags": ["tag services"], "description": "Get all tag available in cytomine", "parameters": [{"name": "max", "in": "query", "description": "Pagination: Number of record per page (default 0 = no pagination)", "required": false, "schema": {"type": "integer", "format": "int32"}}, {"name": "offset", "in": "query", "description": "Pagination: Offset of first record (default 0 = first record)", "required": false, "schema": {"type": "integer", "format": "int32"}}], "responses": {"400": {"description": "Bad Request: missing parameters or bad message format"}, "401": {"description": "Unauthorized: must be auth"}, "403": {"description": "Forbidden: role error"}, "404": {"description": "Object not found"}, "200": {"content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag"}}}}, "description": ""}}}}}, "components": {"schemas": {"AMQP-Queue": {"description": "A queue that supports Advanced Message Queuing Protocol", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the queue"}, "host": {"type": "string", "description": "The host of the queue"}, "exchange": {"type": "string", "description": "The name of the exchange bound to the queue"}}, "required": ["name", "host", "exchange"]}, "AMQP-Queue-Config": {"description": "Possible rabbitMQ configurations for any AMQP queue in the system", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the parameter"}, "defaultValue": {"type": "string", "description": "The default value for the parameter"}, "index": {"type": "integer", "description": "The position of the parameter in the createQueue method", "format": "int32"}, "isInMap": {"type": "boolean", "description": "True if the parameter has to be inside the args map"}, "type": {"type": "string", "description": "The parameter data type"}}, "required": ["name", "defaultValue", "index", "isInMap", "type"]}, "AMQP-Queue-Config-Instance": {"description": "A real configuration value for a specific queue", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "queue": {"type": "integer", "description": "The queue that will be created with a specific value for a specific parameter", "format": "int64"}, "config": {"type": "integer", "description": "The overridden parameter", "format": "int64"}, "value": {"type": "string", "description": "The value of the overridden parameter"}}, "required": ["queue", "config", "value"]}, "Abstract-image": {"description": "A N-dimensional image stored on disk", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "filename": {"type": "string", "description": "Similar to original filename.", "readOnly": true}, "originalFilename": {"type": "string", "description": "The image filename (will be show in GUI)", "readOnly": true}, "scanner": {"type": "integer", "description": "The instrument that digitalize the image", "format": "int64", "default": "0 or null if domain"}, "sample": {"type": "integer", "description": "The source of the image (human, annimal,...)", "format": "int64", "default": "0 or null if domain"}, "uploadedFile": {"type": "integer", "description": "The underlying file stored on disk", "format": "int64"}, "path": {"type": "string", "description": "The internal path of the file", "readOnly": true}, "contentType": {"type": "string", "description": "The image content type", "readOnly": true}, "width": {"type": "integer", "description": "The N-dimensional image width, in pixels (X)", "format": "int32", "default": "-1"}, "height": {"type": "integer", "description": "The N-dimensional image height, in pixels (Y)", "format": "int32", "default": "-1"}, "depth": {"type": "integer", "description": "The N-dimensional image depth, in z-slices (Z)", "format": "int32", "default": "1"}, "duration": {"type": "integer", "description": "The N-dimensional image duration, in frames (T)", "format": "int32", "default": "1"}, "channels": {"type": "integer", "description": "The N-dimensional image channels (C)", "format": "int32", "default": "1"}, "dimensions": {"type": "string", "description": "Textual dimensions of the image: XY, XYZ, XYC, XYT, XYZC, XYZT, XYCT, XYCZT", "readOnly": true}, "physicalSizeX": {"type": "number", "description": "Physical size of a pixel along X axis", "default": "Undefined"}, "physicalSizeY": {"type": "number", "description": "Physical size of a pixel along Y axis", "default": "Undefined"}, "physicalSizeZ": {"type": "number", "description": "Physical size of a pixel along Z axis", "default": "Undefined"}, "fps": {"type": "number", "description": "The number of frames per second", "default": "Undefined"}, "zoom": {"type": "integer", "description": "The number of zooms available in the image", "format": "int32", "readOnly": true}, "resolution": {"type": "number", "description": "The image resolution (microm per pixel)"}, "magnification": {"type": "integer", "description": "The image max zoom", "format": "int32"}, "bitPerSample": {"type": "integer", "description": "The number of bits per sample (color)", "format": "int32"}, "samplePerPixel": {"type": "integer", "description": "The number of samples (colors) per pixel", "format": "int32"}, "colorspace": {"type": "string", "description": "The image colorspace"}, "thumb": {"type": "string", "description": "URL to get abstract image short view (htumb)", "readOnly": true}, "preview": {"type": "string", "description": "URL to get image preview", "readOnly": true}, "macroURL": {"type": "string", "description": "URL to get image macros", "readOnly": true}, "bitDepth": {"type": "integer", "description": "The image bit depth (bits per channel)", "format": "int32", "writeOnly": true}, "metadataUrl": {"type": "string", "description": "URL to get image file metadata"}, "user": {"type": "integer", "description": "The image owner", "format": "int64", "default": "current user", "writeOnly": true}}, "required": ["uploadedFile", "resolution", "magnification", "bitPerSample", "samplePerPixel", "colorspace", "bitDepth"]}, "Abstract-slice": {"description": "An abstract slice of a N-dimensional image", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "uploadedFile": {"type": "integer", "description": "The underlying file for the slice", "format": "int64"}, "imageServerUrl": {"type": "string", "description": "URL of the server with tiles", "readOnly": true}, "path": {"type": "string", "description": "The internal path of the file", "readOnly": true}, "image": {"type": "integer", "description": "The abstract image encapsulating this slice", "format": "int64"}, "mime": {"type": "integer", "description": "The Cytomine internal slice mime type.", "format": "int64"}, "channel": {"type": "integer", "description": "The channel this plane is for. No unit. This is numbered from 0.", "format": "int32"}, "zStack": {"type": "integer", "description": "The Z-section this plane is for. No unit. This is numbered from 0.", "format": "int32"}, "time": {"type": "integer", "description": "The timepoint this plane is for. No unit. This is numbered from 0.", "format": "int32"}, "channelName": {"type": "string", "description": "Optional channel name"}, "rank": {"type": "integer", "description": "The rank of the slice computed as ['channel' + 'image.channels' * ('zStack' + 'image.depth' * 'time')]", "format": "int32", "readOnly": true}}, "required": ["uploadedFile", "image", "mime", "channel", "zStack", "time", "channelName"]}, "Algo-annotation": {"description": "", "type": "object", "properties": {"area": {"type": "number", "description": "The annotation area", "readOnly": true}, "areaUnit": {"type": "integer", "description": "The unit used for area (pixels\u00b2=1,micron\u00b2=3)", "format": "int32", "readOnly": true}, "centroid": {"type": "object", "description": "X,Y coord of the annotation centroid", "readOnly": true}, "class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "countReviewedAnnotations": {"type": "integer", "description": "The number of reviewed annotations for this annotation", "format": "int32", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "cropURL": {"type": "string", "description": "URL to get the annotation crop", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "geometryCompression": {"type": "number", "description": "The geometry compression rate used to simplify the annotation (during creation)", "default": "Undefined"}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "image": {"type": "integer", "description": "The image on which the annotation is drawn", "format": "int64"}, "imageURL": {"type": "string", "description": "URL to go to the image", "readOnly": true}, "location": {"type": "string", "description": "The annotation geometry (shape) in WKT"}, "nbComments": {"type": "integer", "description": "The number of comments added by a user on this annotation", "format": "int64", "readOnly": true}, "perimeter": {"type": "number", "description": "The annotation perimeter", "readOnly": true}, "perimeterUnit": {"type": "integer", "description": "The unit used for perimeter (pixels=0,mm=2,)", "format": "int32", "readOnly": true}, "project": {"type": "integer", "description": "The project in which the annotation is drawn", "format": "int64"}, "reviewed": {"type": "boolean", "description": "True if annotation has at least one review", "readOnly": true}, "slice": {"type": "integer", "description": "The slice on which the annotation is drawn", "format": "int64"}, "smallCropURL": {"type": "string", "description": "URL to get a small annotation crop (<256px)", "readOnly": true}, "term": {"type": "array", "description": "List of term id mapped with this annotation", "default": "[]", "items": {"type": "string"}}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "url": {"type": "string", "description": "URL to go to the annotation on the image", "readOnly": true}, "user": {"type": "integer", "description": "The user job that add this annotation", "format": "int64"}}, "required": ["image", "location", "project", "slice", "user"]}, "Algo-annotation-term": {"description": "Term added to an annotation by a job. Annotation can be: -algo annotation (create by a job) or -user annotation (create by a real user)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "annotationIdent": {"type": "integer", "description": "The annotation id", "format": "int64"}, "annotationClassName": {"type": "string", "description": "The annotation class type (user or algo)"}, "annotation": {"type": "object", "description": "Undefined", "default": "Undefined"}, "term": {"type": "integer", "description": "The term id", "format": "int64"}, "expectedTerm": {"type": "integer", "description": "The real term id, the term added by the user previously", "format": "int64"}, "rate": {"type": "number", "description": "The reliability of the prediction"}, "user": {"type": "integer", "description": "The user job id", "format": "int64"}, "project": {"type": "integer", "description": "The project id", "format": "int64"}}, "required": ["annotationIdent", "annotationClassName", "term", "expectedTerm", "rate", "user", "project"]}, "Annotation-action": {"description": "Each AnnotationAction represent an action (Select, add, update, delete) on an annotation.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The user that did the action", "format": "int64"}, "image": {"type": "integer", "description": "The image which contains the annotation", "format": "int64"}, "slice": {"type": "integer", "description": "The slice which contains the annotation", "format": "int64"}, "project": {"type": "integer", "description": "The project which contains the annotation", "format": "int64"}, "action": {"type": "string", "description": "The action on the annotation (Select, add, delete, update, ...)"}, "annotationIdent": {"type": "integer", "description": "The annotation id", "format": "int64"}, "annotationClassName": {"type": "string", "description": "The annotation class type (roi,user,algo,...)", "readOnly": true}, "annotationCreator": {"type": "integer", "description": "The user that created the annotation", "format": "int64"}}, "required": ["user", "image", "slice", "project", "action", "annotationIdent", "annotationCreator"]}, "Annotation-filter": {"description": "Define a set of filter for annotation listing", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The filter name"}, "user": {"type": "integer", "description": "The user that create the filter (auto field)", "format": "int64", "readOnly": true}, "project": {"type": "integer", "description": "The project of the filter", "format": "int64"}, "terms": {"type": "array", "description": "Terms filter id", "default": "[]", "items": {"type": "string"}}, "users": {"type": "array", "description": "Users filter id", "default": "[]", "items": {"type": "string"}}}, "required": ["name", "project"]}, "Annotation-index": {"description": "A index entry that store, for a slice and a user, the number of annotation created/reviewed", "type": "object", "properties": {"class": {"type": "object", "description": "Undefined", "default": "Undefined"}, "id": {"type": "object", "description": "Undefined", "default": "Undefined"}, "created": {"type": "object", "description": "Undefined", "default": "Undefined"}, "updated": {"type": "object", "description": "Undefined", "default": "Undefined"}, "deleted": {"type": "object", "description": "Undefined", "default": "Undefined"}, "user": {"type": "integer", "description": "The user criteria", "format": "int64", "readOnly": true}, "slice": {"type": "integer", "description": "The slice criteria", "format": "int64", "readOnly": true}, "countAnnotation": {"type": "integer", "description": "The number of annotation added by the user (auto incr with trigger)", "format": "int64", "readOnly": true}, "countReviewedAnnotation": {"type": "integer", "description": "The number of review added by the user (auto incr with trigger)", "format": "int64", "readOnly": true}}}, "Annotation-term": {"description": "Term added to an annotation by a real user (not a job!). Many user can add a term to a single annotation (not only the user that created this annotation)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "userannotation": {"type": "integer", "description": "The annotation id", "format": "int64"}, "term": {"type": "integer", "description": "The term id", "format": "int64"}, "user": {"type": "integer", "description": "The user id", "format": "int64", "default": "current user"}}, "required": ["userannotation", "term"]}, "AnnotationTrack": {"description": "Link between an annotation and a track", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "annotationIdent": {"type": "integer", "description": "Annotation identifier", "format": "int64"}, "annotationClassName": {"type": "string", "description": "Annotation class name"}, "track": {"type": "integer", "description": "The track the association is linked to", "format": "int64"}, "slice": {"type": "integer", "description": "The slice where the annotation is", "format": "int64"}}, "required": ["annotationIdent", "annotationClassName", "track", "slice"]}, "Attached-file": {"description": "A file that may be attached to any Cytomine domain. Usefull to include file into description.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "domainIdent": {"type": "integer", "description": "Domain id", "format": "int64"}, "domainClassName": {"type": "string", "description": "Domain class name"}, "url": {"type": "string", "description": "URL to get this file", "readOnly": true}, "filename": {"type": "string", "description": "File name with ext"}}, "required": ["domainIdent", "domainClassName", "filename"]}, "Companion-file": {"description": "A secondary file related to an abstract image", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "uploadedFile": {"type": "integer", "description": "The underlying file", "format": "int64"}, "path": {"type": "string", "description": "The internal path of the file", "readOnly": true}, "image": {"type": "integer", "description": "The abstract image using this file", "format": "int64"}, "originalFilename": {"type": "string", "description": "The original filename from the upload"}, "filename": {"type": "string", "description": "A user-friendly filename"}, "type": {"type": "string", "description": "The type of file"}, "progress": {"type": "integer", "description": "The file conversion progress", "format": "int32", "default": "Undefined"}, "status": {"type": "integer", "description": "File status", "format": "int32", "readOnly": true}, "statusText": {"type": "string", "description": "Textual file status", "readOnly": true}}, "required": ["uploadedFile", "image", "originalFilename", "filename", "type"]}, "Description": {"description": "A domain description (text, image,...).", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "domainClassName": {"type": "string", "description": "Domain class name"}, "domainIdent": {"type": "integer", "description": "Domain id", "format": "int64"}, "data": {"type": "string", "description": "Description text"}}, "required": ["domainClassName", "domainIdent", "data"]}, "Discipline": {"description": "A discipline is a thematic for a project", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the discipline"}}, "required": ["name"]}, "Group": {"description": "A group is a set of users. A user may be in many groups", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The group name"}, "gid": {"type": "string", "description": "The id for external connection (LDAP, etc.)"}}, "required": ["name", "gid"]}, "Image-Group-HDF5": {"description": "A group of images from the same source with different dimension and HDF5 support", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "group": {"type": "integer", "description": "The image group", "format": "int64"}, "filename": {"type": "string", "description": "The filename for the HDF5 file"}, "progress": {"type": "integer", "description": "The conversion progression (from 0 to 100)", "format": "int32", "default": "Undefined"}, "status": {"type": "integer", "description": "The conversion status (NOTLAUNCH = 0, RUNNING = 1, SUCCESS = 2, FAILED = 3)", "format": "int32", "default": "Undefined"}}, "required": ["group", "filename"]}, "Image-filter": {"description": "An image filter applies image operations (Binary, Eosin,...)", "type": "object", "properties": {"id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "name": {"type": "string", "description": "The filter name", "readOnly": true}, "imagingServer": {"type": "string", "description": "The URL of the imaging server", "readOnly": true}, "baseUrl": {"type": "string", "description": "The URL path of the filter on the imaging server", "readOnly": true}, "class": {"type": "string", "description": "The full class name of the domain"}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date"}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date"}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date"}}}, "Image-filter-project": {"description": "An image filter can be link to many projects", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "imageFilter": {"type": "integer", "description": "The filter", "format": "int64"}, "project": {"type": "integer", "description": "The project", "format": "int64"}, "imagingServer": {"type": "string", "description": "The URL of the imaging server", "readOnly": true}, "baseUrl": {"type": "string", "description": "The URL path of the filter on the imaging server", "readOnly": true}, "name": {"type": "string", "description": "The filter name", "readOnly": true}}, "required": ["imageFilter", "project"]}, "Image-group": {"description": "A group of image from the same source with different dimension", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the project"}, "project": {"type": "integer", "description": "The image group project", "format": "int64"}, "thumb": {"type": "object", "description": "Undefined", "default": "Undefined"}}, "required": ["name", "project"]}, "Image-instance": {"description": "A link between 'abstract image' and 'project'. An 'abstract image' may be in multiple projects.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "baseImage": {"type": "integer", "description": "The image linked to the project", "format": "int64"}, "project": {"type": "integer", "description": "The project that keeps the image", "format": "int64"}, "user": {"type": "integer", "description": "The user that add the image to the project", "format": "int64"}, "instanceFilename": {"type": "string", "description": "Instance image filename", "readOnly": true}, "originalFilename": {"type": "string", "description": "Original filename", "readOnly": true}, "filename": {"type": "string", "description": "Similar to originalFilename", "readOnly": true}, "blindedName": {"type": "object", "description": "Undefined", "default": "Undefined"}, "path": {"type": "string", "description": "The internal path of the file", "readOnly": true}, "contentType": {"type": "string", "description": "The image content type", "readOnly": true}, "sample": {"type": "integer", "description": "The source of the image (human, animal,...)", "format": "int64", "default": "0 or null if domain"}, "width": {"type": "integer", "description": "The N-dimensional image width, in pixels (X)", "format": "int32", "readOnly": true}, "height": {"type": "integer", "description": "The N-dimensional image height, in pixels (Y)", "format": "int32", "readOnly": true}, "depth": {"type": "integer", "description": "The N-dimensional image depth, in z-slices (Z)", "format": "int32", "readOnly": true}, "duration": {"type": "integer", "description": "The N-dimensional image duration, in frames (T)", "format": "int32", "readOnly": true}, "channels": {"type": "integer", "description": "The N-dimensional image channels (C)", "format": "int32", "readOnly": true}, "physicalSizeX": {"type": "number", "description": "Physical size of a pixel along X axis", "default": "Undefined"}, "physicalSizeY": {"type": "number", "description": "Physical size of a pixel along Y axis", "default": "Undefined"}, "physicalSizeZ": {"type": "number", "description": "Physical size of a pixel along Z axis", "default": "Undefined"}, "fps": {"type": "number", "description": "The number of frames per second", "default": "Undefined"}, "zoom": {"type": "integer", "description": "The number of zooms available in the image", "format": "int32", "readOnly": true}, "resolution": {"type": "number", "description": "The image resolution (microm per pixel)"}, "magnification": {"type": "integer", "description": "The image max zoom", "format": "int32"}, "bitPerSample": {"type": "integer", "description": "The number of bits per sample (color)", "format": "int32", "readOnly": true}, "samplePerPixel": {"type": "integer", "description": "The number of samples (colors) per pixel", "format": "int32", "readOnly": true}, "colorspace": {"type": "string", "description": "The image colorspace", "readOnly": true}, "reviewStart": {"type": "string", "description": "The start review date", "format": "date", "readOnly": true}, "reviewStop": {"type": "string", "description": "The stop review date", "format": "date", "readOnly": true}, "reviewUser": {"type": "integer", "description": "The user who reviewed (or still reviewing) this image", "format": "int64", "readOnly": true}, "reviewed": {"type": "boolean", "description": "Image has been reviewed", "readOnly": true}, "inReview": {"type": "boolean", "description": "Image currently reviewed", "readOnly": true}, "numberOfAnnotations": {"type": "integer", "description": "The number of user annotation in the image", "format": "int64", "readOnly": true}, "numberOfJobAnnotations": {"type": "integer", "description": "The number of job annotation in the image", "format": "int64", "readOnly": true}, "numberOfReviewedAnnotations": {"type": "integer", "description": "The number of reviewed annotation in the image", "format": "int64", "readOnly": true}, "thumb": {"type": "string", "description": "URL to get abstract image short view (thumb)", "readOnly": true}, "preview": {"type": "string", "description": "URL to get image preview", "readOnly": true}, "macroURL": {"type": "string", "description": "URL to get image macros", "readOnly": true}}, "required": ["baseImage", "project", "user", "resolution", "magnification"]}, "Image-sequence": {"description": "A position of an image in the image group", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "image": {"type": "integer", "description": "The image", "format": "int64"}, "zStack": {"type": "integer", "description": "The image zStack", "format": "int32", "default": "Undefined"}, "slice": {"type": "integer", "description": "The image slice", "format": "int32", "default": "Undefined"}, "time": {"type": "integer", "description": "The image time", "format": "int32", "default": "Undefined"}, "channel": {"type": "integer", "description": "The image channel", "format": "int32", "default": "Undefined"}, "imageGroup": {"type": "integer", "description": "The image group", "format": "int64"}, "model": {"type": "object", "description": "The image instance full data (see image instance for more details)", "readOnly": true}}, "required": ["image", "imageGroup"]}, "Image-server": {"description": "An image server (IMS) instance", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "A user friendly name for IMS instance.", "default": "Undefined"}, "url": {"type": "string", "description": "The URL of the image server instance"}, "basePath": {"type": "string", "description": "The base path used by the image server"}, "available": {"type": "boolean", "description": "A flag for the server availability"}}, "required": ["url", "basePath", "available"]}, "Job": {"description": "A job is a software instance. This is the execution of software with some parameters", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "algoType": {"type": "string", "description": "The algo type based on the class name", "readOnly": true}, "progress": {"type": "integer", "description": "The algo progression (from 0 to 100)", "format": "int32", "default": "Undefined"}, "status": {"type": "integer", "description": "The algo status (NOTLAUNCH = 0, INQUEUE = 1, RUNNING = 2,SUCCESS = 3,FAILED = 4,INDETERMINATE = 5,WAIT = 6,PREVIEWED = 7, KILLED=8)", "format": "int32", "default": "Undefined"}, "number": {"type": "integer", "description": "Job Indice for this software in this project", "format": "int32", "readOnly": true}, "statusComment": {"type": "string", "description": "Text comment for the job status", "default": "Undefined"}, "project": {"type": "integer", "description": "The project of the job", "format": "int64"}, "processingServer": {"type": "integer", "description": "The processing server in charge to run the job", "format": "int64"}, "software": {"type": "integer", "description": "The software of the job", "format": "int64"}, "softwareName": {"type": "string", "description": "The software name of the job", "readOnly": true}, "rate": {"type": "number", "description": "Generic field for job rate info. The rate is a quality value about the job works", "default": "Undefined"}, "dataDeleted": {"type": "boolean", "description": "Flag to see if data generate by this job are deleted", "default": "Undefined"}, "favorite": {"type": "boolean", "description": "Flag to star an interesting job", "default": "Undefined"}, "username": {"type": "string", "description": "The username of the job", "readOnly": true}, "userJob": {"type": "integer", "description": "The user of the job", "format": "int64", "readOnly": true}, "jobParameters": {"type": "array", "description": "List of job parameters for this job", "items": {"type": "string"}, "readOnly": true}}, "required": ["project", "processingServer", "software"]}, "Job-data": {"description": "Data created by a job. This concerns only data files (annotation or term are store in domain database). If config cytomine.jobdata.filesystem is true, file are stored in filesystem, otherwise they are store in database.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "key": {"type": "string", "description": "File key (what's the file)"}, "job": {"type": "integer", "description": "The job that store the data", "format": "int64"}, "filename": {"type": "string", "description": "Data filename with extension"}, "size": {"type": "integer", "description": "Data size (in Bytes)", "format": "int64", "readOnly": true}, "dir": {"type": "string", "description": "File full path if 'cytomine.jobdata.filesystem' config is true"}, "value": {"type": "integer", "description": "File data (from blob field) if 'cytomine.jobdata.filesystem' config is false", "format": "int64"}}, "required": ["key", "job", "filename"]}, "Job-parameter": {"description": "A job parameter is an instance of software parameter. When a job is created, we create a job parameter for each software parameter.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "value": {"type": "string", "description": "Job parameter value"}, "job": {"type": "integer", "description": "The job of the parameter", "format": "int64"}, "softwareParameter": {"type": "integer", "description": "The parameter id of the software", "format": "int64"}, "name": {"type": "string", "description": "The parameter name in a human readable form", "readOnly": true}, "type": {"type": "string", "description": "The parameter data type (Number, String, Date, Boolean, Domain (e.g: image instance id,...), ListDomain )", "readOnly": true}, "index": {"type": "string", "description": "Index for parameter position. When launching software, parameter will be send ordered by index (asc).", "readOnly": true}, "uri": {"type": "string", "description": "Used for UI. If parameter has '(List)Domain' type, the URI will provide a list of choice. E.g. if uri is 'api/project.json', the choice list will be cytomine project list", "readOnly": true}, "uriPrintAttribut": {"type": "string", "description": "Used for UI. JSON Fields to print in choice list. E.g. if uri is api/project.json and uriPrintAttribut is 'name', the choice list will contains project name ", "readOnly": true}, "uriSortAttribut": {"type": "string", "description": "Used for UI. JSON Fields used to sort choice list. E.g. if uri is api/project.json and uriSortAttribut is 'id', projects will be sort by id (not by name) ", "readOnly": true}, "humanName": {"type": "object", "description": "Undefined", "default": "Undefined"}}, "required": ["value", "job", "softwareParameter"]}, "Job-template": {"description": "A job template is a job with pre-filled parameters. It can be used to init a new 'real' job on the basis of this template.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "algoType": {"type": "string", "description": "The algo type based on the class name", "readOnly": true}, "progress": {"type": "integer", "description": "The algo progression (from 0 to 100)", "format": "int32", "default": "Undefined"}, "status": {"type": "integer", "description": "The algo status (NOTLAUNCH = 0, INQUEUE = 1, RUNNING = 2,SUCCESS = 3,FAILED = 4,INDETERMINATE = 5,WAIT = 6,PREVIEWED = 7, KILLED=8)", "format": "int32", "default": "Undefined"}, "number": {"type": "integer", "description": "Job Indice for this software in this project", "format": "int32", "readOnly": true}, "statusComment": {"type": "string", "description": "Text comment for the job status", "default": "Undefined"}, "project": {"type": "integer", "description": "The project of the job", "format": "int64"}, "processingServer": {"type": "integer", "description": "The processing server in charge to run the job", "format": "int64"}, "software": {"type": "integer", "description": "The software of the job", "format": "int64"}, "softwareName": {"type": "string", "description": "The software name of the job", "readOnly": true}, "rate": {"type": "number", "description": "Generic field for job rate info. The rate is a quality value about the job works", "default": "Undefined"}, "dataDeleted": {"type": "boolean", "description": "Flag to see if data generate by this job are deleted", "default": "Undefined"}, "favorite": {"type": "boolean", "description": "Flag to star an interesting job", "default": "Undefined"}, "username": {"type": "string", "description": "The username of the job", "readOnly": true}, "userJob": {"type": "integer", "description": "The user of the job", "format": "int64", "readOnly": true}, "jobParameters": {"type": "array", "description": "List of job parameters for this job", "items": {"type": "string"}, "readOnly": true}, "name": {"type": "string", "description": "The template name"}}, "required": ["project", "processingServer", "software", "name"]}, "Job-template-annotation": {"description": "A link between a ROI and a job template", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "annotationIdent": {"type": "integer", "description": "The annotation id", "format": "int64"}, "annotationClassName": {"type": "string", "description": "The annotation class type (roi,user,algo,...)", "readOnly": true}, "jobTemplate": {"type": "integer", "description": "The template", "format": "int64"}}, "required": ["annotationIdent", "jobTemplate"]}, "Last-connection": {"description": "A Connection is recorded all long the user is connected.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "project": {"type": "integer", "description": "(mandatory) The project. Null if the user is not in a project", "format": "int64"}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The user", "format": "int64"}}, "required": ["project", "user"]}, "Message-broker-server": {"description": "An instance of a message broker.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "host": {"type": "string", "description": "The host of the message broker"}, "port": {"type": "integer", "description": "The port to which the message broker is connected", "format": "int32"}, "name": {"type": "string", "description": "The name of the message broker server"}}, "required": ["host", "port", "name"]}, "Nested-image-instance": {"description": "An sub image from an image instance (sub area, same image transformed,...)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "baseImage": {"type": "integer", "description": "The image linked to the project", "format": "int64"}, "project": {"type": "integer", "description": "The project that keeps the image", "format": "int64"}, "user": {"type": "integer", "description": "The user that add the image to the project", "format": "int64"}, "instanceFilename": {"type": "string", "description": "Instance image filename", "readOnly": true}, "originalFilename": {"type": "string", "description": "Original filename", "readOnly": true}, "filename": {"type": "string", "description": "Similar to originalFilename", "readOnly": true}, "blindedName": {"type": "object", "description": "Undefined", "default": "Undefined"}, "path": {"type": "string", "description": "The internal path of the file", "readOnly": true}, "contentType": {"type": "string", "description": "The image content type", "readOnly": true}, "sample": {"type": "integer", "description": "The source of the image (human, animal,...)", "format": "int64", "default": "0 or null if domain"}, "width": {"type": "integer", "description": "The N-dimensional image width, in pixels (X)", "format": "int32", "readOnly": true}, "height": {"type": "integer", "description": "The N-dimensional image height, in pixels (Y)", "format": "int32", "readOnly": true}, "depth": {"type": "integer", "description": "The N-dimensional image depth, in z-slices (Z)", "format": "int32", "readOnly": true}, "duration": {"type": "integer", "description": "The N-dimensional image duration, in frames (T)", "format": "int32", "readOnly": true}, "channels": {"type": "integer", "description": "The N-dimensional image channels (C)", "format": "int32", "readOnly": true}, "physicalSizeX": {"type": "number", "description": "Physical size of a pixel along X axis", "default": "Undefined"}, "physicalSizeY": {"type": "number", "description": "Physical size of a pixel along Y axis", "default": "Undefined"}, "physicalSizeZ": {"type": "number", "description": "Physical size of a pixel along Z axis", "default": "Undefined"}, "fps": {"type": "number", "description": "The number of frames per second", "default": "Undefined"}, "zoom": {"type": "integer", "description": "The number of zooms available in the image", "format": "int32", "readOnly": true}, "resolution": {"type": "number", "description": "The image resolution (microm per pixel)"}, "magnification": {"type": "integer", "description": "The image max zoom", "format": "int32"}, "bitPerSample": {"type": "integer", "description": "The number of bits per sample (color)", "format": "int32", "readOnly": true}, "samplePerPixel": {"type": "integer", "description": "The number of samples (colors) per pixel", "format": "int32", "readOnly": true}, "colorspace": {"type": "string", "description": "The image colorspace", "readOnly": true}, "reviewStart": {"type": "string", "description": "The start review date", "format": "date", "readOnly": true}, "reviewStop": {"type": "string", "description": "The stop review date", "format": "date", "readOnly": true}, "reviewUser": {"type": "integer", "description": "The user who reviewed (or still reviewing) this image", "format": "int64", "readOnly": true}, "reviewed": {"type": "boolean", "description": "Image has been reviewed", "readOnly": true}, "inReview": {"type": "boolean", "description": "Image currently reviewed", "readOnly": true}, "numberOfAnnotations": {"type": "integer", "description": "The number of user annotation in the image", "format": "int64", "readOnly": true}, "numberOfJobAnnotations": {"type": "integer", "description": "The number of job annotation in the image", "format": "int64", "readOnly": true}, "numberOfReviewedAnnotations": {"type": "integer", "description": "The number of reviewed annotation in the image", "format": "int64", "readOnly": true}, "thumb": {"type": "string", "description": "URL to get abstract image short view (thumb)", "readOnly": true}, "preview": {"type": "string", "description": "URL to get image preview", "readOnly": true}, "macroURL": {"type": "string", "description": "URL to get image macros", "readOnly": true}, "parent": {"type": "integer", "description": "The image source for this sub-image", "format": "int64"}, "x": {"type": "integer", "description": "Top x position of this image on the sub-image", "format": "int32", "default": "Undefined"}, "y": {"type": "integer", "description": "Top y position of this image on the sub-image", "format": "int32", "default": "Undefined"}}, "required": ["baseImage", "project", "user", "resolution", "magnification", "parent"]}, "Ontology": {"description": "An ontology is a list of term. Each term may be link to other term with a special relation (parent, synonym,...)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the ontology"}, "user": {"type": "integer", "description": "The author of the ontology", "format": "int64"}, "title": {"type": "object", "description": "Undefined", "default": "Undefined"}, "attr": {"type": "object", "description": "Undefined", "default": "Undefined"}, "data": {"type": "object", "description": "Undefined", "default": "Undefined"}, "isFolder": {"type": "object", "description": "Undefined", "default": "Undefined"}, "key": {"type": "object", "description": "Undefined", "default": "Undefined"}, "hideCheckbox": {"type": "object", "description": "Undefined", "default": "Undefined"}, "state": {"type": "object", "description": "Undefined", "default": "Undefined"}, "projects": {"type": "object", "description": "Undefined", "default": "Undefined"}, "children": {"type": "object", "description": "Term Tree", "readOnly": true}}, "required": ["name", "user"]}, "Parameter-constraint": {"description": "Representation of a constraint applicable to a software parameter", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the parameter constraint"}, "expression": {"type": "string", "description": "The expression used to evaluate the parameter constraint"}, "dataType": {"type": "string", "description": "The data type associated with the parameter constraint (Number, Boolean, String, Date, ...)"}}, "required": ["name", "expression", "dataType"]}, "Persistent-connection": {"description": "A Connection is recorded all long the user is connected.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "project": {"type": "integer", "description": "(mandatory) The project. Null if the user is not in a project", "format": "int64"}, "session": {"type": "string", "description": "The sessionID active during the connection"}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The user", "format": "int64"}}, "required": ["project", "session", "user"]}, "Persistent-image-consultation": {"description": "Each PersistentImageConsultation represents an user consultation to an imageInstance.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The user", "format": "int64"}, "image": {"type": "integer", "description": "The consulted image", "format": "int64"}, "imageName": {"type": "string", "description": "The image name"}, "imageThumb": {"type": "string", "description": "The image thumb"}, "mode": {"type": "string", "description": "The consultation mode (Explore, review)"}, "project": {"type": "integer", "description": "The project which contains the image", "format": "int64"}, "projectConnection": {"type": "integer", "description": "The project connection active during the consultation", "format": "int64"}, "time": {"type": "integer", "description": "The duration of the user consultation into the image", "format": "int64", "readOnly": true}, "countCreatedAnnotations": {"type": "integer", "description": "The count of created annotation during the project connection", "format": "int32", "readOnly": true}, "session": {"type": "string", "description": "The sessionID active during the consultation", "writeOnly": true}}, "required": ["user", "image", "imageName", "imageThumb", "mode", "project", "projectConnection", "session"]}, "Persistent-project-connection": {"description": "Each PersistentProjectConnection represents an user connection to a project.", "type": "object", "properties": {"browser": {"type": "string", "description": "The browser of the user"}, "browserVersion": {"type": "string", "description": "The browser version of the user"}, "class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "countCreatedAnnotations": {"type": "integer", "description": "The count of created annotation during the project connection", "format": "int32", "readOnly": true}, "countViewedImages": {"type": "integer", "description": "The count of viewed image during the project connection", "format": "int32", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "os": {"type": "string", "description": "The OS of the user"}, "project": {"type": "integer", "description": "The consultated project id", "format": "int64"}, "session": {"type": "string", "description": "The sessionID active during the connection"}, "time": {"type": "integer", "description": "The duration of the user connection into the project", "format": "int64", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The user id", "format": "int64"}}, "required": ["browser", "browserVersion", "os", "project", "session", "user"]}, "Processing-server": {"description": "A processing server is a server that can be used to run algorithms (containers)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the processing server"}, "host": {"type": "string", "description": "The host of the processing server"}, "username": {"type": "string", "description": "The user of the processing server"}, "port": {"type": "integer", "description": "The port of the processing server", "format": "int32"}, "type": {"type": "string", "description": "The type of the processing server (cpu, gpu, ...)"}, "processingMethodName": {"type": "string", "description": "The processing method name of the processing server"}, "amqpQueue": {"type": "integer", "description": "The amqp queue associated to a given processing server", "format": "int64"}, "persistentDirectory": {"type": "string", "description": "The absolute directory path for persistent data, on the processing server"}, "workingDirectory": {"type": "string", "description": "The absolute directory path for temporary data, on the processing server"}, "index": {"type": "integer", "description": "The index in the default processing server table. Lowest is the default processing server", "format": "int32"}}, "required": ["name", "host", "username", "port", "type", "processingMethodName", "amqpQueue", "persistentDirectory", "workingDirectory", "index"]}, "Project": {"description": "A project is the main cytomine domain, its a workspace to store images, annotations,...", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the project"}, "ontology": {"type": "integer", "description": "The ontology identifier of the project", "format": "int64"}, "ontologyName": {"type": "string", "description": "The ontology name for the project", "readOnly": true}, "discipline": {"type": "integer", "description": "The discipline identifier of the project", "format": "int64", "default": "0 or null if domain"}, "blindMode": {"type": "boolean", "description": "Blind mode (if true, image filename are hidden)", "default": "Undefined"}, "disciplineName": {"type": "string", "description": "The discipline name for the project", "readOnly": true}, "numberOfSlides": {"type": "integer", "description": "The number of samples in the project", "format": "int64", "readOnly": true}, "numberOfImages": {"type": "integer", "description": "Number of image in the project", "format": "int64", "readOnly": true}, "numberOfAnnotations": {"type": "integer", "description": "Number of annotations created by human user in the project", "format": "int64", "readOnly": true}, "numberOfJobAnnotations": {"type": "integer", "description": "Number of annotations created by software in the project", "format": "int64", "readOnly": true}, "retrievalProjects": {"type": "array", "description": "List all projects id that are used for retrieval search (if retrievalDisable = false and retrievalAllOntology = false)", "default": "[]", "items": {"type": "string"}}, "numberOfReviewedAnnotations": {"type": "integer", "description": "Number of annotations validated in the project", "format": "int64", "readOnly": true}, "retrievalDisable": {"type": "boolean", "description": "If true, don't suggest similar annotations"}, "retrievalAllOntology": {"type": "boolean", "description": "If true, search similar annotations on all project that share the same ontology"}, "isClosed": {"type": "boolean", "description": "If true, project is closed", "default": "Undefined"}, "isReadOnly": {"type": "boolean", "description": "If true, the project is read only"}, "isRestricted": {"type": "boolean", "description": "f true, the project is in restricted mode"}, "hideUsersLayers": {"type": "boolean", "description": "If true, an user (which is not an administrator of the project) cannot see others users layers", "default": "Undefined"}, "hideAdminsLayers": {"type": "boolean", "description": "If true, an user (which is not an administrator of the project) cannot see admins layers", "default": "Undefined"}, "admins": {"type": "array", "description": "Admins id that will be in the project", "items": {"type": "string"}, "writeOnly": true}, "users": {"type": "array", "description": "Users id that will be in the project", "items": {"type": "string"}, "writeOnly": true}}, "required": ["name", "ontology", "retrievalDisable", "retrievalAllOntology", "isReadOnly", "isRestricted", "admins", "users"]}, "Project-default-layer": {"description": "A Project default layer is a layer in the default list of the visible layer for all the image of the project", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "project": {"type": "integer", "description": "The project", "format": "int64"}, "user": {"type": "integer", "description": "The user layer", "format": "int64"}, "hideByDefault": {"type": "boolean", "description": "Hide the layer by default (but still in the layer list)"}}, "required": ["project", "user", "hideByDefault"]}, "Project-representative-user": {"description": "A Project representative user is an user considered as the reference for the associate project", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "project": {"type": "integer", "description": "The project", "format": "int64"}, "user": {"type": "integer", "description": "The user considered as the reference", "format": "int64"}}, "required": ["project", "user"]}, "Property": {"description": "A key-value entry that can be map to a domain (project, image, annotation,...)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "domainIdent": {"type": "integer", "description": "The domain identifier (id)", "format": "int64"}, "domainClassName": {"type": "string", "description": "The domain class"}, "key": {"type": "string", "description": "The property key"}, "value": {"type": "string", "description": "The property value"}}, "required": ["domainIdent", "domainClassName", "key", "value"]}, "ROI-annotation": {"description": "A region of interest on a picture", "type": "object", "properties": {"area": {"type": "number", "description": "The annotation area", "readOnly": true}, "areaUnit": {"type": "integer", "description": "The unit used for area (pixels\u00b2=1,micron\u00b2=3)", "format": "int32", "readOnly": true}, "centroid": {"type": "object", "description": "X,Y coord of the annotation centroid", "readOnly": true}, "class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "cropURL": {"type": "string", "description": "URL to get the annotation crop", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "geometryCompression": {"type": "number", "description": "The geometry compression rate used to simplify the annotation (during creation)", "default": "Undefined"}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "image": {"type": "integer", "description": "The image on which the annotation is drawn", "format": "int64"}, "imageURL": {"type": "string", "description": "URL to go to the image", "readOnly": true}, "location": {"type": "string", "description": "The annotation geometry (shape) in WKT"}, "nbComments": {"type": "integer", "description": "The number of comments added by a user on this annotation", "format": "int64", "readOnly": true}, "perimeter": {"type": "number", "description": "The annotation perimeter", "readOnly": true}, "perimeterUnit": {"type": "integer", "description": "The unit used for perimeter (pixels=0,mm=2,)", "format": "int32", "readOnly": true}, "project": {"type": "integer", "description": "The project in which the annotation is drawn", "format": "int64"}, "reviewed": {"type": "boolean", "description": "True if annotation has at least one review", "readOnly": true}, "slice": {"type": "integer", "description": "The slice on which the annotation is drawn", "format": "int64"}, "smallCropURL": {"type": "string", "description": "URL to get a small annotation crop (<256px)", "readOnly": true}, "term": {"type": "array", "description": "List of term id mapped with this annotation", "default": "[]", "items": {"type": "string"}}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "url": {"type": "string", "description": "URL to go to the annotation on the image", "readOnly": true}, "user": {"type": "integer", "description": "User id that created this annotation", "format": "int64"}}, "required": ["image", "location", "project", "slice", "user"]}, "Relation": {"description": "Type of relation between two terms (e.g. term1 PARENT term2)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the relation"}}, "required": ["name"]}, "Relation-term": {"description": "Relation between a term 1 , a term 2 and a relantion domain (e.g. term1 PARENT term2)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "relation": {"type": "integer", "description": "The relation", "format": "int64"}, "term1": {"type": "integer", "description": "The first term", "format": "int64"}, "term2": {"type": "integer", "description": "The second term", "format": "int64"}}, "required": ["relation", "term1", "term2"]}, "Reviewed-annotation": {"description": "A reviewed annotation is an user/algo-annotation validated by a user. When a user validate an user/algoannotation, we copy all data from the validated annotation to create the review annotation", "type": "object", "properties": {"area": {"type": "number", "description": "The annotation area", "readOnly": true}, "areaUnit": {"type": "integer", "description": "The unit used for area (pixels\u00b2=1,micron\u00b2=3)", "format": "int32", "readOnly": true}, "centroid": {"type": "object", "description": "X,Y coord of the annotation centroid", "readOnly": true}, "class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "cropURL": {"type": "string", "description": "URL to get the annotation crop", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "geometryCompression": {"type": "number", "description": "The geometry compression rate used to simplify the annotation (during creation)", "default": "Undefined"}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "image": {"type": "integer", "description": "The image on which the annotation is drawn", "format": "int64"}, "imageURL": {"type": "string", "description": "URL to go to the image", "readOnly": true}, "location": {"type": "string", "description": "The annotation geometry (shape) in WKT"}, "nbComments": {"type": "integer", "description": "The number of comments added by a user on this annotation", "format": "int64", "readOnly": true}, "parentClassName": {"type": "string", "description": "Annotation type that has been reviewed (algo/user)"}, "parentIdent": {"type": "integer", "description": "Annotation id that has been reviewed", "format": "int64"}, "perimeter": {"type": "number", "description": "The annotation perimeter", "readOnly": true}, "perimeterUnit": {"type": "integer", "description": "The unit used for perimeter (pixels=0,mm=2,)", "format": "int32", "readOnly": true}, "project": {"type": "integer", "description": "The project in which the annotation is drawn", "format": "int64"}, "reviewUser": {"type": "integer", "description": "User that review the based annotation", "format": "int64", "default": "current user"}, "reviewed": {"type": "boolean", "description": "Always true", "readOnly": true}, "slice": {"type": "integer", "description": "The slice on which the annotation is drawn", "format": "int64"}, "smallCropURL": {"type": "string", "description": "URL to get a small annotation crop (<256px)", "readOnly": true}, "status": {"type": "integer", "description": "Status for the reviewed", "format": "int32", "default": "Undefined"}, "term": {"type": "array", "description": "List of term id mapped with this annotation", "default": "[]", "items": {"type": "string"}}, "terms": {"type": "array", "description": "List of term id mapped with this annotation", "default": "[]", "items": {"type": "string"}}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "url": {"type": "string", "description": "URL to go to the annotation on the image", "readOnly": true}, "user": {"type": "integer", "description": "User that created the based annotation", "format": "int64", "readOnly": true}}, "required": ["image", "location", "parentClassName", "parentIdent", "project", "slice"]}, "Sample": {"description": "A sample is a source of image. This is a real thing: blood, a mouse lung,...", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "Sample name"}}, "required": ["name"]}, "Search-engine-filter": {"description": "A SearchEngineFilter is a re-usable filter for the SearchEngine. It contains the words searched and the restrictions (domain types or attributes) with others parameters", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The name of the filter"}, "user": {"type": "integer", "description": "The author of the filter", "format": "int64"}, "filters": {"type": "string", "description": "json with the param of the search"}}, "required": ["name", "user", "filters"]}, "Sec-role": {"description": "A user role on the full app (user, admin, guest,...)", "type": "object", "properties": {"id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "authority": {"type": "string", "description": "The role name"}, "class": {"type": "string", "description": "The full class name of the domain"}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date"}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date"}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date"}}, "required": ["authority"]}, "Sec-user": {"description": "A secure user", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "username": {"type": "string", "description": "The username of the user"}, "origin": {"type": "string", "description": "The way this user was created."}, "algo": {"type": "boolean", "description": "If true, user is a userjob", "readOnly": true}, "accountExpired": {"type": "boolean", "description": "If true, account is expired"}, "accountLocked": {"type": "boolean", "description": "If true, account is locked"}, "enabled": {"type": "boolean", "description": "If true, account is enabled"}, "password": {"type": "string", "description": "The user password", "writeOnly": true}, "passwordExpired": {"type": "boolean", "description": "If true, password is expired"}, "privateKey": {"type": "string", "description": "The user private key", "default": "A generated key", "writeOnly": true}, "publicKey": {"type": "string", "description": "The user public key", "default": "A generated key", "writeOnly": true}}, "required": ["username", "origin", "password"]}, "Sec-user-sec-role": {"description": "User - role link. A user may have many role (USER, ADMIN, GUEST)", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "user": {"type": "object", "description": "Undefined", "default": "Undefined"}, "role": {"type": "object", "description": "Undefined", "default": "Undefined"}, "authority": {"type": "object", "description": "Undefined", "default": "Undefined"}, "secRole": {"type": "integer", "description": "The role id", "format": "int64", "writeOnly": true}, "secUser": {"type": "integer", "description": "The user id", "format": "int64", "writeOnly": true}}, "required": ["secRole", "secUser"]}, "Shared-annotation": {"description": "A shared annotation is a comment on a specific annotation.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "comment": {"type": "string", "description": "Comment that will be share with other user"}, "sender": {"type": "integer", "description": "User that write the comment", "format": "int64"}, "senderName": {"type": "object", "description": "Undefined", "default": "Undefined"}, "annotationIdent": {"type": "integer", "description": "Id of the commented annotation ", "format": "int64"}, "annotationClassName": {"type": "string", "description": "Class name of the commented annotation "}, "receivers": {"type": "object", "description": "Undefined", "default": "Undefined"}}, "required": ["comment", "sender", "annotationIdent", "annotationClassName"]}, "Slice-Instance": {"description": "A slice instance of a N-dimensional image", "type": "object", "properties": {"baseSlice": {"type": "integer", "description": "The abstract slice", "format": "int64"}, "class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "image": {"type": "integer", "description": "The image instance", "format": "int64"}, "project": {"type": "integer", "description": "The project", "format": "int64"}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}}, "required": ["baseSlice", "image", "project"]}, "Software": {"description": "Software is an application that can read/add/update/delete data from cytomine. Each time a software is launch, we create a job instance", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The software name"}, "softwareUserRepository": {"type": "integer", "description": "The software's software user repository", "format": "int64"}, "defaultProcessingServer": {"type": "integer", "description": "The software's default processing server", "format": "int64"}, "resultName": {"type": "string", "description": "For UI client: Type of result page. We load a specific page for each software to print data (charts, listing,...)", "default": "Undefined"}, "executeCommand": {"type": "string", "description": "The command used to execute the piece of software"}, "pullingCommand": {"type": "string", "description": "The command used to retrieve the image"}, "deprecated": {"type": "boolean", "description": "Flag used to identify the validity of a piece of software"}, "softwareVersion": {"type": "string", "description": "The version"}, "fullName": {"type": "string", "description": "Full name, including version.", "readOnly": true}, "executable": {"type": "boolean", "description": "True if it can be executed by Cytomine", "readOnly": true}, "parameters": {"type": "array", "description": "List of 'software parameter' for this software (sort by index asc)", "items": {"type": "string"}, "readOnly": true}, "numberOfJob": {"type": "integer", "description": "The number of job for this software", "format": "int64", "readOnly": true}, "numberOfNotLaunch": {"type": "integer", "description": "The number of job not launch for this software", "format": "int64", "readOnly": true}, "numberOfInQueue": {"type": "integer", "description": "The number of job in queue for this software", "format": "int64", "readOnly": true}, "numberOfRunning": {"type": "integer", "description": "The number of job currently running for this software", "format": "int64", "readOnly": true}, "numberOfSuccess": {"type": "integer", "description": "The number of job finished with success for this software", "format": "int64", "readOnly": true}, "numberOfFailed": {"type": "integer", "description": "The number of job failed for this software", "format": "int64", "readOnly": true}, "numberOfIndeterminate": {"type": "integer", "description": "The number of job in indeterminate status for this software", "format": "int64", "readOnly": true}, "numberOfWait": {"type": "integer", "description": "The number of job waiting for this software", "format": "int64", "readOnly": true}, "numberOfKilled": {"type": "integer", "description": "The number of job killed for this software", "format": "int64", "readOnly": true}}, "required": ["name", "softwareUserRepository", "defaultProcessingServer", "executeCommand", "pullingCommand", "deprecated", "softwareVersion"]}, "Software-parameter": {"description": "A parameter for a software. It's a template to create job parameter. When job is init, we create job parameter list based on software parameter list.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The parameter name"}, "type": {"type": "string", "description": "The parameter data type (Number, String, Date, Boolean, Domain (e.g: image instance id,...), ListDomain )"}, "defaultParamValue": {"type": "string", "description": "Default value when creating job parameter", "default": "Undefined"}, "required": {"type": "boolean", "description": "Flag if value is mandatory", "default": "Undefined"}, "software": {"type": "integer", "description": "The software of the parameter", "format": "int64"}, "index": {"type": "integer", "description": "Index for parameter position. When launching software, parameter will be send ordered by index (asc).", "format": "int32", "default": "-1"}, "uri": {"type": "string", "description": "Used for UI. If parameter has '(List)Domain' type, the URI will provide a list of choice. E.g. if uri is 'api/project.json', the choice list will be cytomine project list", "default": "Undefined"}, "uriPrintAttribut": {"type": "string", "description": "Used for UI. JSON Fields to print in choice list. E.g. if uri is api/project.json and uriPrintAttribut is 'name', the choice list will contains project name ", "default": "Undefined"}, "uriSortAttribut": {"type": "string", "description": "Used for UI. JSON Fields used to sort choice list. E.g. if uri is api/project.json and uriSortAttribut is 'id', projects will be sort by id (not by name) ", "default": "Undefined"}, "setByServer": {"type": "boolean", "description": "Indicated if the field is autofilled by the server", "default": "Undefined"}, "serverParameter": {"type": "boolean", "description": "Indicates if the field is a parameter used by a processingServer", "default": "Undefined"}, "humanName": {"type": "string", "description": "The parameter name in a human readable form"}, "valueKey": {"type": "string", "description": "The placeholder for parameter in the command line of software. By default, [NAME]"}, "commandLineFlag": {"type": "string", "description": "The optional command line flag to put before parameter value in the command line."}}, "required": ["name", "type", "software", "humanName", "valueKey", "commandLineFlag"]}, "Software-parameter-constraint": {"description": "The association between a software parameter and a parameter constraint", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "value": {"type": "string", "description": "The value af a given constraint"}, "parameterConstraint": {"type": "object", "description": "Undefined", "default": "Undefined"}, "softwareParameter": {"type": "object", "description": "Undefined", "default": "Undefined"}}, "required": ["value"]}, "Software-project": {"description": "A link between a software and a project. We can add a software to many projects", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "software": {"type": "integer", "description": "The software", "format": "int64"}, "name": {"type": "string", "description": "The name of the software", "readOnly": true}, "softwareVersion": {"type": "object", "description": "Undefined", "default": "Undefined"}, "fullName": {"type": "string", "description": "Full name, including version.", "readOnly": true}, "deprecated": {"type": "boolean", "description": "Flag used to identify the validity of a piece of software", "readOnly": true}, "executable": {"type": "boolean", "description": "True if it can be executed by Cytomine", "readOnly": true}, "project": {"type": "integer", "description": "The project", "format": "int64"}}, "required": ["software", "project"]}, "Software-user-repository": {"description": "Representation of a repository manager and its docker hub", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "provider": {"type": "string", "description": "The provider name the user repository"}, "username": {"type": "string", "description": "The username of the user repository"}, "dockerUsername": {"type": "string", "description": "The docker username associated to the software repository"}, "prefix": {"type": "string", "description": "The prefix used to identify a software repository"}}, "required": ["provider", "username", "dockerUsername", "prefix"]}, "Storage": {"description": "A virtual directory where uploaded files are stored. It is owned by a human user and can be shared with other human users.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The storage owner, which has administration rights on the domain.", "format": "int64", "readOnly": true}, "name": {"type": "string", "description": "The storage name"}}, "required": ["name"]}, "Tag": {"description": "A flag that can be associated to a Cytomine domain.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The tag name"}, "user": {"type": "integer", "description": "user that created the tag", "format": "int64"}, "creatorName": {"type": "string", "description": "The username of the creator", "readOnly": true}}, "required": ["name", "user"]}, "Tag-domain-association": {"description": "A flag that can be associated to a Cytomine domain.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "domainIdent": {"type": "integer", "description": "The domain identifier (id)", "format": "int64"}, "domainClassName": {"type": "string", "description": "The domain class"}, "tag": {"type": "integer", "description": "The tag id", "format": "int64"}, "tagName": {"type": "string", "description": "The tag name", "readOnly": true}}, "required": ["domainIdent", "domainClassName", "tag"]}, "Term": {"description": "Term description", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The term name"}, "comment": {"type": "string", "description": "A comment about the term", "default": "Undefined"}, "ontology": {"type": "integer", "description": "The ontology that store the term", "format": "int64"}, "rate": {"type": "object", "description": "Undefined", "default": "Undefined"}, "parent": {"type": "integer", "description": "The parent term id of this annotation", "format": "int64", "readOnly": true}, "color": {"type": "string", "description": "The color associated, in HTML format (e.g : RED = #FF0000)", "writeOnly": true}}, "required": ["name", "ontology", "color"]}, "Track": {"description": "A track is a group of annotations in different slices of a same image.", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "name": {"type": "string", "description": "The track name"}, "color": {"type": "string", "description": "The color associated to the track"}, "image": {"type": "integer", "description": "The image on which the track is drawn", "format": "int64"}, "project": {"type": "integer", "description": "The project in which the track is drawn", "format": "int64"}}, "required": ["name", "color", "image", "project"]}, "Uploaded-file": {"description": "A file uploaded on the server", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The uploader", "format": "int64"}, "parent": {"type": "integer", "description": "The parent uploaded file in the hierarchy", "format": "int64"}, "imageServer": {"type": "integer", "description": "The image server managing the file", "format": "int64"}, "storage": {"type": "integer", "description": "The virtual storage where the file is uploaded", "format": "int64"}, "originalFilename": {"type": "string", "description": "The original filename, including extension"}, "filename": {"type": "string", "description": "The internal filename path, including extension"}, "ext": {"type": "string", "description": "Extension name"}, "contentType": {"type": "string", "description": "File content type"}, "size": {"type": "integer", "description": "File size", "format": "int64", "default": "Undefined"}, "path": {"type": "string", "description": "The internal path of the file", "readOnly": true}, "status": {"type": "integer", "description": "File status", "format": "int32", "default": "Undefined"}, "statusText": {"type": "string", "description": "Textual file status", "readOnly": true}, "projects": {"type": "integer", "description": "List of projects (id) that will have the image, if it can be deployed", "format": "int64"}, "lTree": {"type": "string", "description": "Hierarchical tree of uploaded files", "default": "Undefined", "writeOnly": true}}, "required": ["user", "parent", "imageServer", "storage", "originalFilename", "filename", "ext", "contentType", "projects"]}, "User": {"description": "A cytomine human user", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "username": {"type": "string", "description": "The username of the user"}, "origin": {"type": "string", "description": "The way this user was created."}, "algo": {"type": "boolean", "description": "If true, user is a userjob", "readOnly": true}, "firstname": {"type": "string", "description": "The firstname of the user"}, "lastname": {"type": "string", "description": "The lastname of the user"}, "email": {"type": "string", "description": "The email of the user"}, "language": {"type": "string", "description": "The language of the user"}, "isDeveloper": {"type": "boolean", "description": "True if user is in developer mode"}, "publicKey": {"type": "string", "description": "The user public key", "default": "A generated key"}, "privateKey": {"type": "string", "description": "The user private key", "default": "A generated key"}, "passwordExpired": {"type": "boolean", "description": "If true, password is expired"}, "enabled": {"type": "boolean", "description": "If true, account is enabled"}, "color": {"type": "string", "description": "NOT USED."}, "user": {"type": "boolean", "description": "(ONLY VISIBLE WHEN DOING GET /api/user/id.format service) True if the user is NOT ADMIN and is USER ", "readOnly": true}, "accountExpired": {"type": "boolean", "description": "If true, account is expired"}, "accountLocked": {"type": "boolean", "description": "If true, account is locked"}, "admin": {"type": "boolean", "description": "(ONLY VISIBLE WHEN DOING GET /api/user/id.format service) True if the user is ADMIN "}, "creator": {"type": "integer", "description": "User that created this user. Its parent.", "format": "int64", "writeOnly": true}, "ghest": {"type": "boolean", "description": "(ONLY VISIBLE WHEN DOING GET /api/user/id.format service) True if the user is NOT ADMIN, NOT USER but a simple GHEST "}, "password": {"type": "string", "description": "The user password", "writeOnly": true}}, "required": ["username", "origin", "firstname", "lastname", "email", "language", "isDeveloper", "color", "creator", "password"]}, "User-annotation": {"description": "An annotation created by a user", "type": "object", "properties": {"area": {"type": "number", "description": "The annotation area", "readOnly": true}, "areaUnit": {"type": "integer", "description": "The unit used for area (pixels\u00b2=1,micron\u00b2=3)", "format": "int32", "readOnly": true}, "centroid": {"type": "object", "description": "X,Y coord of the annotation centroid", "readOnly": true}, "class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "countReviewedAnnotations": {"type": "integer", "description": "The number of reviewed annotations for this annotation", "format": "int32", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "cropURL": {"type": "string", "description": "URL to get the annotation crop", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "geometryCompression": {"type": "number", "description": "The geometry compression rate used to simplify the annotation (during creation)", "default": "Undefined"}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "image": {"type": "integer", "description": "The image on which the annotation is drawn", "format": "int64"}, "imageURL": {"type": "string", "description": "URL to go to the image", "readOnly": true}, "location": {"type": "string", "description": "The annotation geometry (shape) in WKT"}, "nbComments": {"type": "integer", "description": "The number of comments added by a user on this annotation", "format": "int64", "readOnly": true}, "perimeter": {"type": "number", "description": "The annotation perimeter", "readOnly": true}, "perimeterUnit": {"type": "integer", "description": "The unit used for perimeter (pixels=0,mm=2,)", "format": "int32", "readOnly": true}, "project": {"type": "integer", "description": "The project in which the annotation is drawn", "format": "int64"}, "reviewed": {"type": "boolean", "description": "True if annotation has at least one review", "readOnly": true}, "slice": {"type": "integer", "description": "The slice on which the annotation is drawn", "format": "int64"}, "smallCropURL": {"type": "string", "description": "URL to get a small annotation crop (<256px)", "readOnly": true}, "term": {"type": "array", "description": "List of term id mapped with this annotation", "default": "[]", "items": {"type": "string"}}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "url": {"type": "string", "description": "URL to go to the annotation on the image", "readOnly": true}, "user": {"type": "integer", "description": "User id that created this annotation", "format": "int64"}}, "required": ["image", "location", "project", "slice", "user"]}, "User-group": {"description": "Link between a group and a user in database", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "user": {"type": "integer", "description": "The user id", "format": "int64"}, "group": {"type": "integer", "description": "The group id", "format": "int64"}}, "required": ["user", "group"]}, "User-job": {"description": "A cytomine software user", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "username": {"type": "string", "description": "The username of the user"}, "origin": {"type": "string", "description": "The way this user was created."}, "algo": {"type": "boolean", "description": "If true, user is a userjob", "readOnly": true}, "humanUsername": {"type": "string", "description": "The username of the user that launch this job", "readOnly": true}, "publicKey": {"type": "string", "description": "The user public key", "default": "A generated key"}, "privateKey": {"type": "string", "description": "The user private key", "default": "A generated key"}, "job": {"type": "integer", "description": "The related job", "format": "int64"}, "user": {"type": "integer", "description": "Human user that launch the job", "format": "int64"}, "rate": {"type": "number", "description": "The rate succes of the job", "readOnly": true}, "accountExpired": {"type": "boolean", "description": "If true, account is expired"}, "accountLocked": {"type": "boolean", "description": "If true, account is locked"}, "enabled": {"type": "boolean", "description": "If true, account is enabled"}, "password": {"type": "string", "description": "The user password", "writeOnly": true}, "passwordExpired": {"type": "boolean", "description": "If true, password is expired"}}, "required": ["username", "origin", "job", "user", "password"]}, "annotation_listing": {"description": "Response for annotation search", "type": "object", "properties": {"annotationTerms": {"type": "array", "description": "(If params showTerm=true) the annotationterms list id", "items": {"type": "string"}}, "area": {"type": "number", "description": "(If params showGis=true) the area size of the annotation"}, "areaUnit": {"type": "integer", "description": "(If params showGis=true) the area unit (pixels\u00b2=1,micron\u00b2=3)", "format": "int32"}, "class": {"type": "string", "description": "Annotation class name"}, "container": {"type": "integer", "description": "(If params showMeta=true) project annotation id", "format": "int64"}, "countComments": {"type": "integer", "description": "(If params showMeta=true) number of comments on this annotation", "format": "int64"}, "countReviewedAnnotations": {"type": "integer", "description": "(If params showMeta=true and reviewed=false) the number of reviewed annotation from this annotation", "format": "int32"}, "created": {"type": "string", "description": "(If params showMeta=true) annotation create date", "format": "date"}, "creator": {"type": "string", "description": "(If params showUser=true) the username of the creator"}, "cropURL": {"type": "string", "description": "(If params showMeta=true) URL to get the crop annotation (image view that frame the annotation)"}, "firstname": {"type": "string", "description": "(If params showUser=true) the firstname of the creator"}, "geometryCompression": {"type": "number", "description": "(If params showMeta=true) Geometry compression rate used to simplify"}, "id": {"type": "integer", "description": "Annotation id", "format": "int64"}, "idExpectedTerm": {"type": "integer", "description": "(If params showAlgo=true) the expected term (real term add by user previously)", "format": "int64"}, "idTerm": {"type": "integer", "description": "(If params showAlgo=true) the predicted term for the annotation", "format": "int64"}, "image": {"type": "integer", "description": "(If params showMeta=true), image annotation id)", "format": "int64"}, "imageURL": {"type": "string", "description": "(If params showMeta=true) URL to go to the image on the webapp"}, "lastname": {"type": "string", "description": "(If params showUser=true) the lastname of the creator"}, "originalfilename": {"type": "string", "description": "(If params showImage=true) the image filename"}, "parentIdent": {"type": "integer", "description": "(If params showMeta=true, only for reviewed) the annotation parent of the reviewed annotation", "format": "int64"}, "perimeter": {"type": "number", "description": "(If params showGis=true) the perimeter size of the annotation"}, "perimeterUnit": {"type": "number", "description": "(If params showGis=true) the perimeter unit (pixels=0,mm=2,)"}, "project": {"type": "integer", "description": "(If params showMeta=true) project annotation id", "format": "int64"}, "rate": {"type": "number", "description": "(If params showTerm=true) the reliability of the prediction"}, "reviewUser": {"type": "integer", "description": "(If params showGis=true) the user id thatreview", "format": "int64"}, "reviewed": {"type": "integer", "description": "(If params showMeta=true) annotation is reviewed", "format": "int32"}, "smallCropURL": {"type": "string", "description": "(If params showMeta=true)  URL to get the small crop annotation (image view that frame the annotation)"}, "term": {"type": "array", "description": "(If params showTerm=true) the term list id", "items": {"type": "string"}}, "updated": {"type": "string", "description": "(If params showMeta=true) annotation update date", "format": "date"}, "url": {"type": "string", "description": "(If params showMeta=true) URL to go to the annotation on the webapp"}, "user": {"type": "integer", "description": "(If params showMeta=true) user id that create annotation (if reveiwed annotation, user that create the annotation that has been validated)", "format": "int64"}, "userTerm": {"type": "object", "description": "(If params showTerm=true) the user id group by term id"}, "wkt": {"type": "string", "description": "(If params showWKT=true) the full polygon form in WKT"}, "x": {"type": "number", "description": "(If params showGis=true) the annotation centroid x"}, "y": {"type": "number", "description": "(If params showGis=true) the annotation centroid y"}}}, "project_sharing_same_image": {"description": "Response for project sharing the same image (list)", "type": "object", "properties": {"admin": {"type": "boolean", "description": "User is admin or not"}, "imageinstanceId": {"type": "integer", "description": "Image id", "format": "int64"}, "layerId": {"type": "integer", "description": "User id", "format": "int64"}, "layerName": {"type": "integer", "description": "User name", "format": "int64"}, "projectId": {"type": "integer", "description": "Project id", "format": "int64"}, "projectName": {"type": "integer", "description": "Project name", "format": "int64"}}}, "search": {"description": "Response for search request", "type": "object", "properties": {"class": {"type": "string", "description": "Domain class"}, "created": {"type": "string", "description": "Domain creation timestamp", "format": "date"}, "description": {"type": "string", "description": "Domain description text"}, "id": {"type": "integer", "description": "Domain id", "format": "int64"}, "imageName": {"type": "string", "description": "Image (storing the domain) name. If domain is project, then null"}, "name": {"type": "string", "description": "Domain name"}, "projectName": {"type": "string", "description": "Project (storing the domain) name"}, "urlApi": {"type": "string", "description": "URL to get JSON data on the current domain"}, "urlGoTo": {"type": "string", "description": "URL to go to the domain on the webapp (GUI)"}, "urlImage": {"type": "array", "description": "Domain thumb (if annotation: crop, if image: thumb, if project: null)", "items": {"type": "string"}}, "user": {"type": "integer", "description": "Domain creator", "format": "int64"}, "userfullname": {"type": "string", "description": "Domain creator name (Lastname Firstname)"}}}, "search_engine_step1": {"description": "Response for search request v2 (STEP 1)", "type": "object", "properties": {"className": {"type": "string", "description": "Domain class name"}, "id": {"type": "integer", "description": "Domain id", "format": "int64"}}}, "search_engine_step2": {"description": "Response for search request v2 (STEP 2)", "type": "object", "properties": {"className": {"type": "string", "description": "Domain class name"}, "id": {"type": "integer", "description": "Domain id", "format": "int64"}, "matching": {"type": "array", "description": "Domain data that match the request words (domain attribute, property, description,...)", "items": {"type": "object"}}, "name": {"type": "string", "description": "The name of the resource (could be: name, filename, term,...)"}, "url": {"type": "string", "description": "URL to go to this resource on the webapp"}}}, "sequence_possibilties": {"description": "Response for sequence possibilities", "type": "object", "properties": {"c": {"type": "array", "description": "Range of possible channel index for image group", "items": {"type": "string"}}, "channel": {"type": "array", "description": "Image channel index", "items": {"type": "string"}}, "imageGroup": {"type": "array", "description": "Image group id", "items": {"type": "string"}}, "s": {"type": "array", "description": "Range of possible slice index for image group", "items": {"type": "string"}}, "slice": {"type": "array", "description": "Image slice index", "items": {"type": "string"}}, "t": {"type": "array", "description": "Range of possible time index for image group", "items": {"type": "string"}}, "time": {"type": "array", "description": "Image time index", "items": {"type": "string"}}, "z": {"type": "array", "description": "Range of possible zstack index for image group", "items": {"type": "string"}}, "zStack": {"type": "array", "description": "Image zstack index", "items": {"type": "string"}}}}, "configuration": {"description": "A key-value entry that save the configurations through the application", "type": "object", "properties": {"class": {"type": "string", "description": "The full class name of the domain", "readOnly": true}, "id": {"type": "integer", "description": "The domain id", "format": "int64", "readOnly": true}, "created": {"type": "string", "description": "The date of the domain creation", "format": "date", "readOnly": true}, "updated": {"type": "string", "description": "The date of the domain modification", "format": "date", "readOnly": true}, "deleted": {"type": "string", "description": "When domain was removed from Cytomine", "format": "date", "readOnly": true}, "key": {"type": "string", "description": "The property key"}, "value": {"type": "string", "description": "The property value"}, "readingRole": {"type": "object", "description": "The minimum role needed to access to the configuration value"}}, "required": ["key", "value", "readingRole"]}}}}